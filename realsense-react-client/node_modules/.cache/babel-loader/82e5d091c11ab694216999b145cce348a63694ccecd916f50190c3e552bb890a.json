{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport cloudSignalingService from '../services/cloudSignalingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointCloudDemo = () => {\n  _s();\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [sessionId, setSessionId] = useState(null);\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const discoverRobots = async () => {\n    try {\n      logMessage('🔍 Discovering available robots...');\n      const availableRobots = await cloudSignalingService.getAvailableRobots();\n      setRobots(availableRobots);\n      logMessage(`✅ Found ${availableRobots.length} robot(s): ${availableRobots.map(r => r.robotId).join(', ')}`);\n    } catch (error) {\n      logMessage(`❌ Failed to discover robots: ${error.message}`);\n    }\n  };\n  const connectToCloud = async () => {\n    try {\n      logMessage('🌐 Connecting to cloud signaling server...');\n      await cloudSignalingService.connect();\n      setIsConnected(true);\n      setConnectionStatus('Connected');\n      logMessage('✅ Connected to cloud signaling server');\n\n      // Discover robots after connecting\n      await discoverRobots();\n    } catch (error) {\n      logMessage(`❌ Failed to connect to cloud: ${error.message}`);\n      setConnectionStatus('Connection Failed');\n    }\n  };\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, canvasRef.current.clientWidth / canvasRef.current.clientHeight, 0.1, 1000);\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true\n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n    logMessage('Three.js initialized');\n  };\n  const updatePointCloud = async () => {\n    // This function is now deprecated - point cloud data comes through WebRTC data channels\n    if (!isViewerRunningRef.current || !selectedRobot) return;\n\n    // Just log that we're using WebRTC data channels now\n    if (Math.random() < 0.1) {\n      // Only log occasionally to avoid spam\n      logMessage('📡 Point cloud data now comes through WebRTC data channels');\n    }\n  };\n  const animate = currentTime => {\n    if (!isViewerRunningRef.current) return;\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n  const startPointCloudViewer = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n\n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Start a WebRTC session for depth stream to enable point cloud data\n      try {\n        logMessage('Starting WebRTC depth stream session...');\n        const offer = await cloudSignalingService.createSession(selectedRobot, deviceId, ['depth']);\n        const newSessionId = offer.sessionId;\n        setSessionId(newSessionId);\n        logMessage(`WebRTC depth session created: ${newSessionId}`);\n\n        // Create RTCPeerConnection\n        const pc = new RTCPeerConnection({\n          iceServers: [{\n            urls: 'stun:stun.l.google.com:19302'\n          }]\n        });\n        peerConnectionRef.current = pc;\n\n        // Handle ICE candidates\n        pc.onicecandidate = async event => {\n          if (event.candidate) {\n            try {\n              await cloudSignalingService.sendIceCandidate(newSessionId, event.candidate);\n            } catch (error) {\n              logMessage(`Failed to send ICE candidate: ${error.message}`);\n            }\n          }\n        };\n\n        // Set remote description\n        await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n        // Create answer\n        const answer = await pc.createAnswer();\n        await pc.setLocalDescription(answer);\n\n        // Send answer via cloud server\n        logMessage(`Sending answer for session: ${newSessionId}`);\n        await cloudSignalingService.sendAnswer(newSessionId, answer);\n\n        // Activate point cloud processing\n        logMessage('Activating point cloud processing...');\n        await cloudSignalingService.activatePointCloud(deviceId, true);\n        logMessage('Point cloud processing activated');\n\n        // Set up WebRTC data channel for point cloud data\n        setupWebRTCDataChannel(newSessionId);\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n      logMessage('3D point cloud viewer started successfully');\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n  const setupWebRTCDataChannel = sessionId => {\n    try {\n      // Get the WebRTC peer connection from the signaling service\n      const peerConnection = cloudSignalingService.getPeerConnection(sessionId);\n      if (!peerConnection) {\n        logMessage('❌ No peer connection available for data channel');\n        return;\n      }\n\n      // Create data channel for receiving point cloud data\n      const dataChannel = peerConnection.createDataChannel('pointcloud-data');\n      dataChannel.onopen = () => {\n        logMessage('📡 WebRTC data channel opened for point cloud data');\n      };\n      dataChannel.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'pointcloud-data' && data.vertices) {\n            logMessage(`📡 Received point cloud data: ${data.vertices.length} vertices`);\n\n            // Update the point cloud with the received data\n            updatePointCloudWithData(data.vertices);\n          }\n        } catch (error) {\n          logMessage(`❌ Error parsing point cloud data: ${error.message}`);\n        }\n      };\n      dataChannel.onclose = () => {\n        logMessage('📡 WebRTC data channel closed');\n      };\n      dataChannel.onerror = error => {\n        logMessage(`❌ WebRTC data channel error: ${error.message}`);\n      };\n      logMessage('✅ WebRTC data channel setup complete');\n    } catch (error) {\n      logMessage(`❌ Error setting up WebRTC data channel: ${error.message}`);\n    }\n  };\n  const updatePointCloudWithData = vertices => {\n    try {\n      if (!vertices || vertices.length === 0) {\n        logMessage('No vertices data received');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      const vertexArray = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertices.length} input vertices`);\n      setVertexCount(vertexArray.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        sizeAttenuation: true\n      });\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n      } else {\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n      }\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertexArray.length / 3} vertices`);\n    } catch (error) {\n      logMessage(`Error updating point cloud with data: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage('Resetting device...');\n\n      // Close WebRTC session if exists\n      if (sessionId) {\n        try {\n          await cloudSignalingService.closeSession(sessionId);\n          logMessage('Closed WebRTC session');\n        } catch (error) {\n          logMessage(`Warning: ${error.message}`);\n        }\n      }\n\n      // Deactivate point cloud processing\n      try {\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up WebRTC session if it exists\n    if (sessionId) {\n      try {\n        logMessage('Cleaning up WebRTC session...');\n        await cloudSignalingService.closeSession(sessionId);\n        logMessage('WebRTC session cleaned up');\n\n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        const deviceId = selectedRobot.replace('robot-', '');\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Point cloud processing deactivated');\n\n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        logMessage(`Warning: Failed to clean up WebRTC session: ${error.message}`);\n      }\n    }\n\n    // Clear session ID\n    setSessionId(null);\n    logMessage('3D point cloud viewer stopped');\n  };\n  const handleKeyPress = useCallback(event => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n  useEffect(() => {\n    // Initialize Three.js on component mount\n    initThreeJS();\n\n    // Connect to cloud server on mount\n    connectToCloud();\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n\n      // Cleanup on unmount\n      if (selectedRobot) {\n        const deviceId = selectedRobot.replace('robot-', '');\n        // Clean up any active streams\n        try {\n          cloudSignalingService.stopDeviceStream(deviceId);\n          cloudSignalingService.activatePointCloud(deviceId, false);\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n      cloudSignalingService.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF RealSense 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Interactive 3D visualization of RealSense depth data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"robotSelect\",\n          children: \"Select Robot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"robotSelect\",\n          value: selectedRobot,\n          onChange: e => setSelectedRobot(e.target.value),\n          disabled: !isConnected,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a robot...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), robots.map(robot => {\n            var _robot$deviceInfo;\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: robot.robotId,\n              children: [robot.robotId, \" - \", ((_robot$deviceInfo = robot.deviceInfo) === null || _robot$deviceInfo === void 0 ? void 0 : _robot$deviceInfo.name) || 'Unknown Device']\n            }, robot.robotId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverRobots,\n          className: \"button\",\n          disabled: !isConnected,\n          children: \"\\uD83D\\uDD0D Discover Robots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startPointCloudViewer,\n          className: \"button success\",\n          disabled: isViewerRunning || !selectedRobot,\n          children: \"\\u25B6\\uFE0F Start 3D Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopPointCloudViewer,\n          className: \"button danger\",\n          disabled: !isViewerRunning,\n          children: \"\\u23F9\\uFE0F Stop Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          disabled: !selectedRobot,\n          children: \"\\uD83D\\uDD04 Reset Device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Cloud Connection:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 19\n            }, this), \" \", isConnected ? 'Connected' : 'Disconnected']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Point Cloud:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 19\n            }, this), \" \", pointCloudStatus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Vertices:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 19\n            }, this), \" \", vertexCount.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"FPS:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 19\n            }, this), \" \", fps]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${isConnected ? 'success' : 'error'}`,\n        children: [\"\\uD83C\\uDF10 Cloud Signaling Server: \", isConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAE 3D Viewer Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mouse Controls:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Left Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 17\n            }, this), \" Rotate camera around target\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Right Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 17\n            }, this), \" Pan camera\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Scroll Wheel:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, this), \" Zoom in/out\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"R Key:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }, this), \" Reset camera to initial position\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'rgba(0, 0, 0, 0.8)',\n          borderRadius: '15px',\n          padding: '20px',\n          height: '600px',\n          position: 'relative',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            width: '100%',\n            height: '100%',\n            borderRadius: '10px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), !isViewerRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '18px',\n            color: '#ffd700'\n          },\n          children: \"Click \\\"Start 3D Viewer\\\" to begin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this), isViewerRunning && vertexCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            background: 'rgba(0, 0, 0, 0.7)',\n            padding: '10px',\n            borderRadius: '8px',\n            fontSize: '14px',\n            color: 'white'\n          },\n          children: [\"Points: \", vertexCount.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n};\n_s(PointCloudDemo, \"eqyVSpl6PfzNkJ93ZUQCY3nc12o=\");\n_c = PointCloudDemo;\nexport default PointCloudDemo;\nvar _c;\n$RefreshReg$(_c, \"PointCloudDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","THREE","OrbitControls","cloudSignalingService","jsxDEV","_jsxDEV","PointCloudDemo","_s","robots","setRobots","selectedRobot","setSelectedRobot","isViewerRunning","setIsViewerRunning","connectionStatus","setConnectionStatus","sessionId","setSessionId","pointCloudStatus","setPointCloudStatus","vertexCount","setVertexCount","fps","setFps","isConnected","setIsConnected","isViewerRunningRef","updateIntervalRef","log","setLog","canvasRef","sceneRef","cameraRef","rendererRef","controlsRef","pointCloudRef","peerConnectionRef","animationIdRef","frameCountRef","lastTimeRef","hasInitializedCameraRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","discoverRobots","availableRobots","getAvailableRobots","length","map","r","robotId","join","error","connectToCloud","connect","initThreeJS","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","canvas","antialias","setSize","setPixelRatio","window","devicePixelRatio","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","gridHelper","GridHelper","axesHelper","AxesHelper","updatePointCloud","Math","random","animate","currentTime","requestAnimationFrame","update","render","children","startPointCloudViewer","alert","deviceId","replace","remove","geometry","dispose","material","offer","createSession","newSessionId","pc","RTCPeerConnection","iceServers","urls","onicecandidate","event","candidate","sendIceCandidate","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendAnswer","activatePointCloud","setupWebRTCDataChannel","setInterval","clearInterval","peerConnection","getPeerConnection","dataChannel","createDataChannel","onopen","onmessage","data","JSON","parse","type","vertices","updatePointCloudWithData","onclose","onerror","flatVertices","i","vertex","Array","isArray","x","y","z","isNaN","isFinite","push","vertexArray","Float32Array","currentCameraPosition","clone","currentTarget","target","BufferGeometry","setAttribute","BufferAttribute","attributes","count","PointsMaterial","size","color","transparent","opacity","sizeAttenuation","pointCloud","Points","copy","resetDevice","closeSession","Promise","resolve","setTimeout","stopPointCloudViewer","cancelAnimationFrame","handleKeyPress","key","addEventListener","removeEventListener","stopDeviceStream","disconnect","handleResize","width","height","aspect","updateProjectionMatrix","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","disabled","robot","_robot$deviceInfo","deviceInfo","name","onClick","style","display","justifyContent","alignItems","toLocaleString","borderRadius","padding","overflow","ref","top","left","transform","fontSize","right","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport cloudSignalingService from '../services/cloudSignalingService';\n\nconst PointCloudDemo = () => {\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [sessionId, setSessionId] = useState(null);\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  \n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const discoverRobots = async () => {\n    try {\n      logMessage('🔍 Discovering available robots...');\n      const availableRobots = await cloudSignalingService.getAvailableRobots();\n      setRobots(availableRobots);\n      logMessage(`✅ Found ${availableRobots.length} robot(s): ${availableRobots.map(r => r.robotId).join(', ')}`);\n    } catch (error) {\n      logMessage(`❌ Failed to discover robots: ${error.message}`);\n    }\n  };\n\n  const connectToCloud = async () => {\n    try {\n      logMessage('🌐 Connecting to cloud signaling server...');\n      await cloudSignalingService.connect();\n      setIsConnected(true);\n      setConnectionStatus('Connected');\n      logMessage('✅ Connected to cloud signaling server');\n      \n      // Discover robots after connecting\n      await discoverRobots();\n    } catch (error) {\n      logMessage(`❌ Failed to connect to cloud: ${error.message}`);\n      setConnectionStatus('Connection Failed');\n    }\n  };\n\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvasRef.current.clientWidth / canvasRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      canvas: canvasRef.current,\n      antialias: true \n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n\n    logMessage('Three.js initialized');\n  };\n\n  const updatePointCloud = async () => {\n    // This function is now deprecated - point cloud data comes through WebRTC data channels\n    if (!isViewerRunningRef.current || !selectedRobot) return;\n    \n    // Just log that we're using WebRTC data channels now\n    if (Math.random() < 0.1) { // Only log occasionally to avoid spam\n      logMessage('📡 Point cloud data now comes through WebRTC data channels');\n    }\n  };\n\n  const animate = (currentTime) => {\n    if (!isViewerRunningRef.current) return;\n\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n\n  const startPointCloudViewer = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      \n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Start a WebRTC session for depth stream to enable point cloud data\n      try {\n        logMessage('Starting WebRTC depth stream session...');\n        const offer = await cloudSignalingService.createSession(selectedRobot, deviceId, ['depth']);\n        const newSessionId = offer.sessionId;\n        setSessionId(newSessionId);\n        logMessage(`WebRTC depth session created: ${newSessionId}`);\n\n        // Create RTCPeerConnection\n        const pc = new RTCPeerConnection({\n          iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n        });\n        peerConnectionRef.current = pc;\n\n        // Handle ICE candidates\n        pc.onicecandidate = async (event) => {\n          if (event.candidate) {\n            try {\n              await cloudSignalingService.sendIceCandidate(newSessionId, event.candidate);\n            } catch (error) {\n              logMessage(`Failed to send ICE candidate: ${error.message}`);\n            }\n          }\n        };\n\n        // Set remote description\n        await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n        // Create answer\n        const answer = await pc.createAnswer();\n        await pc.setLocalDescription(answer);\n\n        // Send answer via cloud server\n        logMessage(`Sending answer for session: ${newSessionId}`);\n        await cloudSignalingService.sendAnswer(newSessionId, answer);\n\n        // Activate point cloud processing\n        logMessage('Activating point cloud processing...');\n        await cloudSignalingService.activatePointCloud(deviceId, true);\n        logMessage('Point cloud processing activated');\n\n        // Set up WebRTC data channel for point cloud data\n        setupWebRTCDataChannel(newSessionId);\n\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n\n      logMessage('3D point cloud viewer started successfully');\n\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const setupWebRTCDataChannel = (sessionId) => {\n    try {\n      // Get the WebRTC peer connection from the signaling service\n      const peerConnection = cloudSignalingService.getPeerConnection(sessionId);\n      \n      if (!peerConnection) {\n        logMessage('❌ No peer connection available for data channel');\n        return;\n      }\n\n      // Create data channel for receiving point cloud data\n      const dataChannel = peerConnection.createDataChannel('pointcloud-data');\n      \n      dataChannel.onopen = () => {\n        logMessage('📡 WebRTC data channel opened for point cloud data');\n      };\n\n      dataChannel.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          \n          if (data.type === 'pointcloud-data' && data.vertices) {\n            logMessage(`📡 Received point cloud data: ${data.vertices.length} vertices`);\n            \n            // Update the point cloud with the received data\n            updatePointCloudWithData(data.vertices);\n          }\n        } catch (error) {\n          logMessage(`❌ Error parsing point cloud data: ${error.message}`);\n        }\n      };\n\n      dataChannel.onclose = () => {\n        logMessage('📡 WebRTC data channel closed');\n      };\n\n      dataChannel.onerror = (error) => {\n        logMessage(`❌ WebRTC data channel error: ${error.message}`);\n      };\n\n      logMessage('✅ WebRTC data channel setup complete');\n\n    } catch (error) {\n      logMessage(`❌ Error setting up WebRTC data channel: ${error.message}`);\n    }\n  };\n\n  const updatePointCloudWithData = (vertices) => {\n    try {\n      if (!vertices || vertices.length === 0) {\n        logMessage('No vertices data received');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && \n              isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      \n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      \n      const vertexArray = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertices.length} input vertices`);\n      \n      setVertexCount(vertexArray.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        sizeAttenuation: true\n      });\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n      } else {\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n      }\n\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertexArray.length / 3} vertices`);\n\n    } catch (error) {\n      logMessage(`Error updating point cloud with data: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage('Resetting device...');\n      \n      // Close WebRTC session if exists\n      if (sessionId) {\n        try {\n          await cloudSignalingService.closeSession(sessionId);\n          logMessage('Closed WebRTC session');\n        } catch (error) {\n          logMessage(`Warning: ${error.message}`);\n        }\n      }\n      \n      // Deactivate point cloud processing\n      try {\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n      \n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up WebRTC session if it exists\n    if (sessionId) {\n      try {\n        logMessage('Cleaning up WebRTC session...');\n        await cloudSignalingService.closeSession(sessionId);\n        logMessage('WebRTC session cleaned up');\n    \n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        const deviceId = selectedRobot.replace('robot-', '');\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Point cloud processing deactivated');\n    \n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n    \n      } catch (error) {\n        logMessage(`Warning: Failed to clean up WebRTC session: ${error.message}`);\n      }\n    }\n    \n    // Clear session ID\n    setSessionId(null);\n\n    logMessage('3D point cloud viewer stopped');\n  };\n\n\n\n  const handleKeyPress = useCallback((event) => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n\n  useEffect(() => {\n    // Initialize Three.js on component mount\n    initThreeJS();\n\n    // Connect to cloud server on mount\n    connectToCloud();\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n      \n      // Cleanup on unmount\n      if (selectedRobot) {\n        const deviceId = selectedRobot.replace('robot-', '');\n        // Clean up any active streams\n        try {\n          cloudSignalingService.stopDeviceStream(deviceId);\n          cloudSignalingService.activatePointCloud(deviceId, false);\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n      \n      cloudSignalingService.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🎯 RealSense 3D Point Cloud Viewer</h2>\n        <p>Interactive 3D visualization of RealSense depth data</p>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"robotSelect\">Select Robot:</label>\n          <select\n            id=\"robotSelect\"\n            value={selectedRobot}\n            onChange={(e) => setSelectedRobot(e.target.value)}\n            disabled={!isConnected}\n          >\n            <option value=\"\">Select a robot...</option>\n            {robots.map((robot) => (\n              <option key={robot.robotId} value={robot.robotId}>\n                {robot.robotId} - {robot.deviceInfo?.name || 'Unknown Device'}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div>\n          <button onClick={discoverRobots} className=\"button\" disabled={!isConnected}>\n            🔍 Discover Robots\n          </button>\n          <button \n            onClick={startPointCloudViewer} \n            className=\"button success\"\n            disabled={isViewerRunning || !selectedRobot}\n          >\n            ▶️ Start 3D Viewer\n          </button>\n          <button \n            onClick={stopPointCloudViewer} \n            className=\"button danger\"\n            disabled={!isViewerRunning}\n          >\n            ⏹️ Stop Viewer\n          </button>\n          <button \n            onClick={resetDevice} \n            className=\"button warning\"\n            disabled={!selectedRobot}\n          >\n            🔄 Reset Device\n          </button>\n        </div>\n\n        <div className=\"status info\">\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span><strong>Cloud Connection:</strong> {isConnected ? 'Connected' : 'Disconnected'}</span>\n            <span><strong>Point Cloud:</strong> {pointCloudStatus}</span>\n            <span><strong>Vertices:</strong> {vertexCount.toLocaleString()}</span>\n            <span><strong>FPS:</strong> {fps}</span>\n          </div>\n        </div>\n        <div className={`status ${isConnected ? 'success' : 'error'}`}>\n          🌐 Cloud Signaling Server: {isConnected ? 'Connected' : 'Disconnected'}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎮 3D Viewer Controls</h2>\n        <div className=\"sessions-panel\">\n          <h3>Mouse Controls:</h3>\n          <ul>\n            <li><strong>Left Click + Drag:</strong> Rotate camera around target</li>\n            <li><strong>Right Click + Drag:</strong> Pan camera</li>\n            <li><strong>Scroll Wheel:</strong> Zoom in/out</li>\n            <li><strong>R Key:</strong> Reset camera to initial position</li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 3D Point Cloud Viewer</h2>\n        <div style={{ \n          background: 'rgba(0, 0, 0, 0.8)', \n          borderRadius: '15px', \n          padding: '20px', \n          height: '600px', \n          position: 'relative', \n          overflow: 'hidden' \n        }}>\n          <canvas\n            ref={canvasRef}\n            style={{\n              width: '100%',\n              height: '100%',\n              borderRadius: '10px',\n              display: 'block'\n            }}\n          />\n          {!isViewerRunning && (\n            <div style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              fontSize: '18px',\n              color: '#ffd700'\n            }}>\n              Click \"Start 3D Viewer\" to begin\n            </div>\n          )}\n          {isViewerRunning && vertexCount > 0 && (\n            <div style={{\n              position: 'absolute',\n              top: '20px',\n              right: '20px',\n              background: 'rgba(0, 0, 0, 0.7)',\n              padding: '10px',\n              borderRadius: '8px',\n              fontSize: '14px',\n              color: 'white'\n            }}>\n              Points: {vertexCount.toLocaleString()}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointCloudDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}