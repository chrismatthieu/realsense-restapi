{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport cloudSignalingService from '../services/cloudSignalingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRTCDemo = () => {\n  _s();\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [sessions, setSessions] = useState([]);\n  const [streamRefs, setStreamRefs] = useState([]);\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot first', 'error');\n      return;\n    }\n    try {\n      logMessage('Refreshing robot connection...');\n      updateStatus('Refreshing robot...', 'info');\n\n      // Wait for robot to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Try to discover robots again\n      await discoverRobots();\n      updateStatus('Robot refresh completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to refresh robot: ${error.message}`);\n      updateStatus(`Failed to refresh robot: ${error.message}`, 'error');\n    }\n  };\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const {\n        sessionId,\n        offer\n      } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n\n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer === null || offer === void 0 ? void 0 : offer.type}`);\n      logMessage(`Offer sdp: ${offer !== null && offer !== void 0 && offer.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = event => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async event => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n  const refreshSessions = async () => {\n    try {\n      // In cloud architecture, sessions are managed by the cloud server\n      // We can get session info from the cloud signaling service\n      logMessage('Session management handled by cloud server');\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      // Close current session if active\n      if (sessionIdRef.current) {\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        sessionIdRef.current = null;\n      }\n      logMessage('All sessions closed');\n      setSessions([]);\n      setStreamRefs([]);\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n  useEffect(() => {\n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      try {\n        await cloudSignalingService.connect();\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n\n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', robots => {\n          setAvailableRobots(robots);\n          if (robots.length > 0 && !selectedRobot) {\n            setSelectedRobot(robots[0]);\n            setDeviceId(robots[0].deviceInfo.deviceId);\n          }\n        });\n        cloudSignalingService.addEventListener('robot-available', robot => {\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        cloudSignalingService.addEventListener('robot-unavailable', robot => {\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          if (selectedRobot && selectedRobot.robotId === robot.robotId) {\n            setSelectedRobot(null);\n          }\n        });\n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n      }\n    };\n    connectToCloud();\n    return () => {\n      stopSessionRefresh();\n      cloudSignalingService.disconnect();\n    };\n  }, [logMessage, selectedRobot]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDD16 Robot WebRTC Multi-Client Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"robotSelect\",\n          children: \"Select Robot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"robotSelect\",\n          value: selectedRobot ? selectedRobot.robotId : '',\n          onChange: e => {\n            const robot = availableRobots.find(r => r.robotId === e.target.value);\n            setSelectedRobot(robot);\n            if (robot) {\n              setDeviceId(robot.deviceInfo.deviceId);\n            }\n          },\n          disabled: availableRobots.length === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"No robots available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), availableRobots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: robot.robotId,\n            children: [robot.deviceInfo.name, \" (Device: \", robot.deviceInfo.deviceId, \")\"]\n          }, robot.robotId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Available robots: \", availableRobots.length, \" | Selected device: \", deviceId || 'None']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"streamType\",\n          children: \"Stream Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"streamType\",\n          value: streamType,\n          onChange: e => setStreamType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"color\",\n            children: \"Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"depth\",\n            children: \"Depth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-1\",\n            children: \"Infrared 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-2\",\n            children: \"Infrared 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '10px 0',\n            padding: '10px',\n            backgroundColor: '#e7f3ff',\n            borderRadius: '4px',\n            borderLeft: '4px solid #007bff'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83C\\uDFAF 3D Point Cloud Viewer:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), \" For interactive 3D point cloud visualization,\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/pointcloud\",\n            style: {\n              color: '#007bff',\n              textDecoration: 'none',\n              fontWeight: 'bold',\n              marginLeft: '5px'\n            },\n            children: \"click here to open the 3D Point Cloud Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverRobots,\n          className: \"button\",\n          children: \"\\uD83D\\uDD0D Discover Robots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startStream,\n          className: \"button\",\n          disabled: isConnected,\n          children: \"\\u25B6\\uFE0F Start WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopStream,\n          className: \"button danger\",\n          disabled: !isConnected,\n          children: \"\\u23F9\\uFE0F Stop WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshSessions,\n          className: \"button\",\n          children: \"\\uD83D\\uDD04 Refresh Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeAllSessions,\n          className: \"button danger\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Close All Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          children: \"\\uD83D\\uDD04 Refresh Robot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${statusType}`,\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${signalingConnected ? 'success' : 'error'}`,\n        children: [\"\\u2601\\uFE0F Cloud Server: \", signalingConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCCA Cloud Sessions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: sessionIdRef.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Active WebRTC Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Session ID: \", sessionIdRef.current]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Robot: \", (selectedRobot === null || selectedRobot === void 0 ? void 0 : selectedRobot.robotId) || 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Device: \", deviceId || 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Stream Type: \", streamType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No active sessions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start a stream to establish a WebRTC session with a robot.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDD17 Cloud Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: signalingConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cloud Server Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u2705 Connected to cloud signaling server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uD83E\\uDD16 Available robots: \", availableRobots.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCE1 WebRTC sessions managed by cloud server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cloud Server Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u274C Not connected to cloud server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please check your connection to the cloud signaling server.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 Video Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `video-wrapper ${isConnected ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Current Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            style: {\n              width: '100%',\n              borderRadius: '8px',\n              background: '#000'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status ${isConnected ? 'success' : 'info'}`,\n            children: isConnected ? 'Streaming' : 'No video stream'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_s(WebRTCDemo, \"V4afNhBkEArPotwWxJEolY+08wQ=\");\n_c = WebRTCDemo;\nexport default WebRTCDemo;\nvar _c;\n$RefreshReg$(_c, \"WebRTCDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","cloudSignalingService","jsxDEV","_jsxDEV","WebRTCDemo","_s","deviceId","setDeviceId","streamType","setStreamType","status","setStatus","statusType","setStatusType","log","setLog","isConnected","setIsConnected","sessions","setSessions","streamRefs","setStreamRefs","signalingConnected","setSignalingConnected","availableRobots","setAvailableRobots","selectedRobot","setSelectedRobot","videoRef","peerConnectionRef","sessionIdRef","sessionRefreshIntervalRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","updateStatus","type","resetDevice","Promise","resolve","setTimeout","discoverRobots","error","robots","getAvailableRobots","length","deviceInfo","map","r","robotId","join","startStream","sessionData","createSession","sessionId","offer","current","JSON","stringify","sdp","pc","RTCPeerConnection","iceServers","urls","ontrack","event","srcObject","streams","onicecandidate","candidate","sendIceCandidate","Error","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendAnswer","startSessionRefresh","stopStream","closeSession","close","stopSessionRefresh","refreshSessions","closeAllSessions","setInterval","clearInterval","connectToCloud","connect","addEventListener","robot","filter","disconnect","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","find","target","disabled","name","style","margin","padding","backgroundColor","borderRadius","borderLeft","href","color","textDecoration","fontWeight","marginLeft","onClick","ref","autoPlay","playsInline","muted","width","background","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport cloudSignalingService from '../services/cloudSignalingService';\n\nconst WebRTCDemo = () => {\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [sessions, setSessions] = useState([]);\n  const [streamRefs, setStreamRefs] = useState([]);\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  \n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot first', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Refreshing robot connection...');\n      updateStatus('Refreshing robot...', 'info');\n      \n      // Wait for robot to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Try to discover robots again\n      await discoverRobots();\n      \n      updateStatus('Robot refresh completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to refresh robot: ${error.message}`);\n      updateStatus(`Failed to refresh robot: ${error.message}`, 'error');\n    }\n  };\n\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      \n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      \n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      \n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const { sessionId, offer } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n      \n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer?.type}`);\n      logMessage(`Offer sdp: ${offer?.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = (event) => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async (event) => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      \n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n\n  const refreshSessions = async () => {\n    try {\n      // In cloud architecture, sessions are managed by the cloud server\n      // We can get session info from the cloud signaling service\n      logMessage('Session management handled by cloud server');\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      // Close current session if active\n      if (sessionIdRef.current) {\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        sessionIdRef.current = null;\n      }\n      logMessage('All sessions closed');\n      setSessions([]);\n      setStreamRefs([]);\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      try {\n        await cloudSignalingService.connect();\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n        \n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', (robots) => {\n          setAvailableRobots(robots);\n          if (robots.length > 0 && !selectedRobot) {\n            setSelectedRobot(robots[0]);\n            setDeviceId(robots[0].deviceInfo.deviceId);\n          }\n        });\n        \n        cloudSignalingService.addEventListener('robot-available', (robot) => {\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        \n        cloudSignalingService.addEventListener('robot-unavailable', (robot) => {\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          if (selectedRobot && selectedRobot.robotId === robot.robotId) {\n            setSelectedRobot(null);\n          }\n        });\n        \n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n      }\n    };\n\n    connectToCloud();\n    \n    return () => {\n      stopSessionRefresh();\n      cloudSignalingService.disconnect();\n    };\n  }, [logMessage, selectedRobot]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🤖 Robot WebRTC Multi-Client Demo</h2>\n        <p>Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming</p>\n        \n\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"robotSelect\">Select Robot:</label>\n          <select\n            id=\"robotSelect\"\n            value={selectedRobot ? selectedRobot.robotId : ''}\n            onChange={(e) => {\n              const robot = availableRobots.find(r => r.robotId === e.target.value);\n              setSelectedRobot(robot);\n              if (robot) {\n                setDeviceId(robot.deviceInfo.deviceId);\n              }\n            }}\n            disabled={availableRobots.length === 0}\n          >\n            <option value=\"\">No robots available</option>\n            {availableRobots.map(robot => (\n              <option key={robot.robotId} value={robot.robotId}>\n                {robot.deviceInfo.name} (Device: {robot.deviceInfo.deviceId})\n              </option>\n            ))}\n          </select>\n          <small>Available robots: {availableRobots.length} | Selected device: {deviceId || 'None'}</small>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"streamType\">Stream Type:</label>\n          <select\n            id=\"streamType\"\n            value={streamType}\n            onChange={(e) => setStreamType(e.target.value)}\n          >\n            <option value=\"color\">Color</option>\n            <option value=\"depth\">Depth</option>\n            <option value=\"infrared-1\">Infrared 1</option>\n            <option value=\"infrared-2\">Infrared 2</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <p style={{ margin: '10px 0', padding: '10px', backgroundColor: '#e7f3ff', borderRadius: '4px', borderLeft: '4px solid #007bff' }}>\n            <strong>🎯 3D Point Cloud Viewer:</strong> For interactive 3D point cloud visualization, \n            <a href=\"/pointcloud\" style={{ color: '#007bff', textDecoration: 'none', fontWeight: 'bold', marginLeft: '5px' }}>\n              click here to open the 3D Point Cloud Demo\n            </a>\n          </p>\n        </div>\n        \n        <div>\n          <button onClick={discoverRobots} className=\"button\">\n            🔍 Discover Robots\n          </button>\n          <button \n            onClick={startStream} \n            className=\"button\"\n            disabled={isConnected}\n          >\n            ▶️ Start WebRTC Session\n          </button>\n          <button \n            onClick={stopStream} \n            className=\"button danger\"\n            disabled={!isConnected}\n          >\n            ⏹️ Stop WebRTC Session\n          </button>\n          <button onClick={refreshSessions} className=\"button\">\n            🔄 Refresh Sessions\n          </button>\n          <button onClick={closeAllSessions} className=\"button danger\">\n            🗑️ Close All Sessions\n          </button>\n          <button onClick={resetDevice} className=\"button warning\">\n            🔄 Refresh Robot\n          </button>\n        </div>\n\n        <div className={`status ${statusType}`}>\n          {status}\n        </div>\n        <div className={`status ${signalingConnected ? 'success' : 'error'}`}>\n          ☁️ Cloud Server: {signalingConnected ? 'Connected' : 'Disconnected'}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📊 Cloud Sessions</h2>\n        <div className=\"sessions-panel\">\n          {sessionIdRef.current ? (\n            <div>\n              <h3>Active WebRTC Session</h3>\n              <p>Session ID: {sessionIdRef.current}</p>\n              <p>Robot: {selectedRobot?.robotId || 'Unknown'}</p>\n              <p>Device: {deviceId || 'Unknown'}</p>\n              <p>Stream Type: {streamType}</p>\n            </div>\n          ) : (\n            <div>\n              <h3>No active sessions</h3>\n              <p>Start a stream to establish a WebRTC session with a robot.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🔗 Cloud Connection</h2>\n        <div className=\"sessions-panel\">\n          {signalingConnected ? (\n            <div>\n              <h3>Cloud Server Status</h3>\n              <p>✅ Connected to cloud signaling server</p>\n              <p>🤖 Available robots: {availableRobots.length}</p>\n              <p>📡 WebRTC sessions managed by cloud server</p>\n            </div>\n          ) : (\n            <div>\n              <h3>Cloud Server Status</h3>\n              <p>❌ Not connected to cloud server</p>\n              <p>Please check your connection to the cloud signaling server.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 Video Stream</h2>\n        <div className=\"video-container\">\n          <div className={`video-wrapper ${isConnected ? 'active' : ''}`}>\n            <h3>Current Stream</h3>\n            <video\n              ref={videoRef}\n              autoPlay\n              playsInline\n              muted\n              style={{ width: '100%', borderRadius: '8px', background: '#000' }}\n            />\n            <div className={`status ${isConnected ? 'success' : 'info'}`}>\n              {isConnected ? 'Streaming' : 'No video stream'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default WebRTCDemo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,qBAAqB,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;EACrD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,kBAAkB,CAAC;EACxD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,MAAM,CAAC;EACpD,MAAM,CAACkB,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC4B,eAAe,EAAEC,kBAAkB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMgC,QAAQ,GAAG9B,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM+B,iBAAiB,GAAG/B,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMgC,YAAY,GAAGhC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMiC,yBAAyB,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAE9C,MAAMkC,UAAU,GAAGjC,WAAW,CAAEkC,OAAO,IAAK;IAC1C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IACjDrB,MAAM,CAACsB,IAAI,IAAI,IAAIH,SAAS,KAAKD,OAAO,KAAKI,IAAI,EAAE,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGvC,WAAW,CAAC,CAACkC,OAAO,EAAEM,IAAI,GAAG,MAAM,KAAK;IAC3D5B,SAAS,CAACsB,OAAO,CAAC;IAClBpB,aAAa,CAAC0B,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACd,aAAa,EAAE;MAClBY,YAAY,CAAC,6BAA6B,EAAE,OAAO,CAAC;MACpD;IACF;IAEA,IAAI;MACFN,UAAU,CAAC,gCAAgC,CAAC;MAC5CM,YAAY,CAAC,qBAAqB,EAAE,MAAM,CAAC;;MAE3C;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,cAAc,CAAC,CAAC;MAEtBN,YAAY,CAAC,yBAAyB,EAAE,SAAS,CAAC;IACpD,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdb,UAAU,CAAC,4BAA4Ba,KAAK,CAACZ,OAAO,EAAE,CAAC;MACvDK,YAAY,CAAC,4BAA4BO,KAAK,CAACZ,OAAO,EAAE,EAAE,OAAO,CAAC;IACpE;EACF,CAAC;EAED,MAAMW,cAAc,GAAG7C,WAAW,CAAC,YAAY;IAC7C,IAAI;MACFiC,UAAU,CAAC,iCAAiC,CAAC;MAC7CM,YAAY,CAAC,uBAAuB,EAAE,MAAM,CAAC;MAE7C,MAAMQ,MAAM,GAAG7C,qBAAqB,CAAC8C,kBAAkB,CAAC,CAAC;MACzDtB,kBAAkB,CAACqB,MAAM,CAAC;MAE1B,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;QACrBrB,gBAAgB,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3BvC,WAAW,CAACuC,MAAM,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC3C,QAAQ,CAAC;QAC1C0B,UAAU,CAAC,SAASc,MAAM,CAACE,MAAM,cAAcF,MAAM,CAACI,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACvFf,YAAY,CAAC,SAASQ,MAAM,CAACE,MAAM,WAAW,EAAE,SAAS,CAAC;MAC5D,CAAC,MAAM;QACLhB,UAAU,CAAC,qBAAqB,CAAC;QACjCM,YAAY,CAAC,qBAAqB,EAAE,SAAS,CAAC;MAChD;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdb,UAAU,CAAC,8BAA8Ba,KAAK,CAACZ,OAAO,EAAE,CAAC;MACzDK,YAAY,CAAC,8BAA8BO,KAAK,CAACZ,OAAO,EAAE,EAAE,OAAO,CAAC;IACtE;EACF,CAAC,EAAE,CAACD,UAAU,EAAEM,YAAY,CAAC,CAAC;EAE9B,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAAC5B,aAAa,EAAE;MAClBY,YAAY,CAAC,uBAAuB,EAAE,OAAO,CAAC;MAC9C;IACF;IAEA,IAAI,CAAChB,kBAAkB,EAAE;MACvBgB,YAAY,CAAC,+BAA+B,EAAE,OAAO,CAAC;MACtD;IACF;IAEA,IAAI;MACFN,UAAU,CAAC,2BAA2B,CAAC;MACvCM,YAAY,CAAC,2BAA2B,EAAE,MAAM,CAAC;MAEjDN,UAAU,CAAC,sCAAsCN,aAAa,CAAC0B,OAAO,aAAa1B,aAAa,CAACuB,UAAU,CAAC3C,QAAQ,kBAAkBE,UAAU,EAAE,CAAC;;MAEnJ;MACA,MAAM+C,WAAW,GAAG,MAAMtD,qBAAqB,CAACuD,aAAa,CAAC9B,aAAa,CAAC0B,OAAO,EAAE1B,aAAa,CAACuB,UAAU,CAAC3C,QAAQ,EAAE,CAACE,UAAU,CAAC,CAAC;MACrI,MAAM;QAAEiD,SAAS;QAAEC;MAAM,CAAC,GAAGH,WAAW;MACxCzB,YAAY,CAAC6B,OAAO,GAAGF,SAAS;MAChCzB,UAAU,CAAC,oBAAoByB,SAAS,EAAE,CAAC;;MAE3C;MACAzB,UAAU,CAAC,iBAAiB4B,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,EAAE,CAAC;MACpD1B,UAAU,CAAC,eAAe0B,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEnB,IAAI,EAAE,CAAC;MACxCP,UAAU,CAAC,cAAc0B,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEI,GAAG,GAAG,SAAS,GAAG,SAAS,EAAE,CAAC;;MAE9D;MACA,MAAMC,EAAE,GAAG,IAAIC,iBAAiB,CAAC;QAC/BC,UAAU,EAAE,CAAC;UAAEC,IAAI,EAAE;QAA+B,CAAC;MACvD,CAAC,CAAC;MACFrC,iBAAiB,CAAC8B,OAAO,GAAGI,EAAE;;MAE9B;MACAA,EAAE,CAACI,OAAO,GAAIC,KAAK,IAAK;QACtBpC,UAAU,CAAC,uBAAuB,CAAC;QACnC,IAAIJ,QAAQ,CAAC+B,OAAO,EAAE;UACpB/B,QAAQ,CAAC+B,OAAO,CAACU,SAAS,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;QAC/C;MACF,CAAC;;MAED;MACAP,EAAE,CAACQ,cAAc,GAAG,MAAOH,KAAK,IAAK;QACnC,IAAIA,KAAK,CAACI,SAAS,EAAE;UACnB,IAAI;YACF,MAAMvE,qBAAqB,CAACwE,gBAAgB,CAAChB,SAAS,EAAEW,KAAK,CAACI,SAAS,CAAC;UAC1E,CAAC,CAAC,OAAO3B,KAAK,EAAE;YACdb,UAAU,CAAC,iCAAiCa,KAAK,CAACZ,OAAO,EAAE,CAAC;UAC9D;QACF;MACF,CAAC;;MAED;MACA,IAAI,CAACyB,KAAK,IAAI,CAACA,KAAK,CAACnB,IAAI,IAAI,CAACmB,KAAK,CAACI,GAAG,EAAE;QACvC,MAAM,IAAIY,KAAK,CAAC,2BAA2Bd,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,EAAE,CAAC;MACrE;MAEA1B,UAAU,CAAC,yCAAyC0B,KAAK,CAACnB,IAAI,EAAE,CAAC;MACjE;MACA,MAAMwB,EAAE,CAACY,oBAAoB,CAAC,IAAIC,qBAAqB,CAAClB,KAAK,CAAC,CAAC;;MAE/D;MACA,MAAMmB,MAAM,GAAG,MAAMd,EAAE,CAACe,YAAY,CAAC,CAAC;MACtC,MAAMf,EAAE,CAACgB,mBAAmB,CAACF,MAAM,CAAC;;MAEpC;MACA7C,UAAU,CAAC,+BAA+ByB,SAAS,EAAE,CAAC;MACtD,MAAMxD,qBAAqB,CAAC+E,UAAU,CAACvB,SAAS,EAAEoB,MAAM,CAAC;MAEzD5D,cAAc,CAAC,IAAI,CAAC;MACpBqB,YAAY,CAAC,yBAAyB,EAAE,SAAS,CAAC;MAClDN,UAAU,CAAC,sCAAsC,CAAC;;MAElD;MACAiD,mBAAmB,CAAC,CAAC;IAEvB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdb,UAAU,CAAC,2BAA2Ba,KAAK,CAACZ,OAAO,EAAE,CAAC;MACtDK,YAAY,CAAC,2BAA2BO,KAAK,CAACZ,OAAO,EAAE,EAAE,OAAO,CAAC;IACnE;EACF,CAAC;EAED,MAAMiD,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,IAAIpD,YAAY,CAAC6B,OAAO,EAAE;QACxB3B,UAAU,CAAC,2BAA2B,CAAC;QACvC,MAAM/B,qBAAqB,CAACkF,YAAY,CAACrD,YAAY,CAAC6B,OAAO,CAAC;QAC9D3B,UAAU,CAAC,uBAAuB,CAAC;MACrC;MAEA,IAAIH,iBAAiB,CAAC8B,OAAO,EAAE;QAC7B9B,iBAAiB,CAAC8B,OAAO,CAACyB,KAAK,CAAC,CAAC;QACjCvD,iBAAiB,CAAC8B,OAAO,GAAG,IAAI;MAClC;MAEA,IAAI/B,QAAQ,CAAC+B,OAAO,EAAE;QACpB/B,QAAQ,CAAC+B,OAAO,CAACU,SAAS,GAAG,IAAI;MACnC;MAEApD,cAAc,CAAC,KAAK,CAAC;MACrBa,YAAY,CAAC6B,OAAO,GAAG,IAAI;MAC3BrB,YAAY,CAAC,uBAAuB,EAAE,MAAM,CAAC;MAC7C+C,kBAAkB,CAAC,CAAC;IAEtB,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdb,UAAU,CAAC,0BAA0Ba,KAAK,CAACZ,OAAO,EAAE,CAAC;IACvD;EACF,CAAC;EAED,MAAMqD,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA;MACAtD,UAAU,CAAC,4CAA4C,CAAC;IAC1D,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdb,UAAU,CAAC,+BAA+Ba,KAAK,CAACZ,OAAO,EAAE,CAAC;IAC5D;EACF,CAAC;EAED,MAAMsD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFvD,UAAU,CAAC,yBAAyB,CAAC;MACrC;MACA,IAAIF,YAAY,CAAC6B,OAAO,EAAE;QACxB,MAAM1D,qBAAqB,CAACkF,YAAY,CAACrD,YAAY,CAAC6B,OAAO,CAAC;QAC9D7B,YAAY,CAAC6B,OAAO,GAAG,IAAI;MAC7B;MACA3B,UAAU,CAAC,qBAAqB,CAAC;MACjCb,WAAW,CAAC,EAAE,CAAC;MACfE,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdb,UAAU,CAAC,iCAAiCa,KAAK,CAACZ,OAAO,EAAE,CAAC;IAC9D;EACF,CAAC;EAED,MAAMgD,mBAAmB,GAAGA,CAAA,KAAM;IAChClD,yBAAyB,CAAC4B,OAAO,GAAG6B,WAAW,CAACF,eAAe,EAAE,IAAI,CAAC;EACxE,CAAC;EAED,MAAMD,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAItD,yBAAyB,CAAC4B,OAAO,EAAE;MACrC8B,aAAa,CAAC1D,yBAAyB,CAAC4B,OAAO,CAAC;MAChD5B,yBAAyB,CAAC4B,OAAO,GAAG,IAAI;IAC1C;EACF,CAAC;EAED9D,SAAS,CAAC,MAAM;IACd;IACA,MAAM6F,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMzF,qBAAqB,CAAC0F,OAAO,CAAC,CAAC;QACrCpE,qBAAqB,CAAC,IAAI,CAAC;QAC3BS,UAAU,CAAC,2BAA2B,CAAC;;QAEvC;QACA/B,qBAAqB,CAAC2F,gBAAgB,CAAC,kBAAkB,EAAG9C,MAAM,IAAK;UACrErB,kBAAkB,CAACqB,MAAM,CAAC;UAC1B,IAAIA,MAAM,CAACE,MAAM,GAAG,CAAC,IAAI,CAACtB,aAAa,EAAE;YACvCC,gBAAgB,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3BvC,WAAW,CAACuC,MAAM,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC3C,QAAQ,CAAC;UAC5C;QACF,CAAC,CAAC;QAEFL,qBAAqB,CAAC2F,gBAAgB,CAAC,iBAAiB,EAAGC,KAAK,IAAK;UACnEpE,kBAAkB,CAACY,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEwD,KAAK,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF5F,qBAAqB,CAAC2F,gBAAgB,CAAC,mBAAmB,EAAGC,KAAK,IAAK;UACrEpE,kBAAkB,CAACY,IAAI,IAAIA,IAAI,CAACyD,MAAM,CAAC3C,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKyC,KAAK,CAACzC,OAAO,CAAC,CAAC;UACzE,IAAI1B,aAAa,IAAIA,aAAa,CAAC0B,OAAO,KAAKyC,KAAK,CAACzC,OAAO,EAAE;YAC5DzB,gBAAgB,CAAC,IAAI,CAAC;UACxB;QACF,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdb,UAAU,CAAC,sCAAsCa,KAAK,CAACZ,OAAO,EAAE,CAAC;QACjEV,qBAAqB,CAAC,KAAK,CAAC;MAC9B;IACF,CAAC;IAEDmE,cAAc,CAAC,CAAC;IAEhB,OAAO,MAAM;MACXL,kBAAkB,CAAC,CAAC;MACpBpF,qBAAqB,CAAC8F,UAAU,CAAC,CAAC;IACpC,CAAC;EACH,CAAC,EAAE,CAAC/D,UAAU,EAAEN,aAAa,CAAC,CAAC;EAE/B,oBACEvB,OAAA;IAAA6F,QAAA,gBACE7F,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB7F,OAAA;QAAA6F,QAAA,EAAI;MAAiC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1ClG,OAAA;QAAA6F,QAAA,EAAG;MAAuF;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAI9FlG,OAAA;QAAK8F,SAAS,EAAC,YAAY;QAAAD,QAAA,gBACzB7F,OAAA;UAAOmG,OAAO,EAAC,aAAa;UAAAN,QAAA,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClDlG,OAAA;UACEoG,EAAE,EAAC,aAAa;UAChBC,KAAK,EAAE9E,aAAa,GAAGA,aAAa,CAAC0B,OAAO,GAAG,EAAG;UAClDqD,QAAQ,EAAGC,CAAC,IAAK;YACf,MAAMb,KAAK,GAAGrE,eAAe,CAACmF,IAAI,CAACxD,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKsD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;YACrE7E,gBAAgB,CAACkE,KAAK,CAAC;YACvB,IAAIA,KAAK,EAAE;cACTtF,WAAW,CAACsF,KAAK,CAAC5C,UAAU,CAAC3C,QAAQ,CAAC;YACxC;UACF,CAAE;UACFuG,QAAQ,EAAErF,eAAe,CAACwB,MAAM,KAAK,CAAE;UAAAgD,QAAA,gBAEvC7F,OAAA;YAAQqG,KAAK,EAAC,EAAE;YAAAR,QAAA,EAAC;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC5C7E,eAAe,CAAC0B,GAAG,CAAC2C,KAAK,iBACxB1F,OAAA;YAA4BqG,KAAK,EAAEX,KAAK,CAACzC,OAAQ;YAAA4C,QAAA,GAC9CH,KAAK,CAAC5C,UAAU,CAAC6D,IAAI,EAAC,YAAU,EAACjB,KAAK,CAAC5C,UAAU,CAAC3C,QAAQ,EAAC,GAC9D;UAAA,GAFauF,KAAK,CAACzC,OAAO;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAElB,CACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC,eACTlG,OAAA;UAAA6F,QAAA,GAAO,oBAAkB,EAACxE,eAAe,CAACwB,MAAM,EAAC,sBAAoB,EAAC1C,QAAQ,IAAI,MAAM;QAAA;UAAA4F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9F,CAAC,eAENlG,OAAA;QAAK8F,SAAS,EAAC,YAAY;QAAAD,QAAA,gBACzB7F,OAAA;UAAOmG,OAAO,EAAC,YAAY;UAAAN,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAChDlG,OAAA;UACEoG,EAAE,EAAC,YAAY;UACfC,KAAK,EAAEhG,UAAW;UAClBiG,QAAQ,EAAGC,CAAC,IAAKjG,aAAa,CAACiG,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAE;UAAAR,QAAA,gBAE/C7F,OAAA;YAAQqG,KAAK,EAAC,OAAO;YAAAR,QAAA,EAAC;UAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpClG,OAAA;YAAQqG,KAAK,EAAC,OAAO;YAAAR,QAAA,EAAC;UAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpClG,OAAA;YAAQqG,KAAK,EAAC,YAAY;YAAAR,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9ClG,OAAA;YAAQqG,KAAK,EAAC,YAAY;YAAAR,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENlG,OAAA;QAAK8F,SAAS,EAAC,YAAY;QAAAD,QAAA,eACzB7F,OAAA;UAAG4G,KAAK,EAAE;YAAEC,MAAM,EAAE,QAAQ;YAAEC,OAAO,EAAE,MAAM;YAAEC,eAAe,EAAE,SAAS;YAAEC,YAAY,EAAE,KAAK;YAAEC,UAAU,EAAE;UAAoB,CAAE;UAAApB,QAAA,gBAChI7F,OAAA;YAAA6F,QAAA,EAAQ;UAAyB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,kDAC1C,eAAAlG,OAAA;YAAGkH,IAAI,EAAC,aAAa;YAACN,KAAK,EAAE;cAAEO,KAAK,EAAE,SAAS;cAAEC,cAAc,EAAE,MAAM;cAAEC,UAAU,EAAE,MAAM;cAAEC,UAAU,EAAE;YAAM,CAAE;YAAAzB,QAAA,EAAC;UAElH;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENlG,OAAA;QAAA6F,QAAA,gBACE7F,OAAA;UAAQuH,OAAO,EAAE9E,cAAe;UAACqD,SAAS,EAAC,QAAQ;UAAAD,QAAA,EAAC;QAEpD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlG,OAAA;UACEuH,OAAO,EAAEpE,WAAY;UACrB2C,SAAS,EAAC,QAAQ;UAClBY,QAAQ,EAAE7F,WAAY;UAAAgF,QAAA,EACvB;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlG,OAAA;UACEuH,OAAO,EAAExC,UAAW;UACpBe,SAAS,EAAC,eAAe;UACzBY,QAAQ,EAAE,CAAC7F,WAAY;UAAAgF,QAAA,EACxB;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlG,OAAA;UAAQuH,OAAO,EAAEpC,eAAgB;UAACW,SAAS,EAAC,QAAQ;UAAAD,QAAA,EAAC;QAErD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlG,OAAA;UAAQuH,OAAO,EAAEnC,gBAAiB;UAACU,SAAS,EAAC,eAAe;UAAAD,QAAA,EAAC;QAE7D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTlG,OAAA;UAAQuH,OAAO,EAAElF,WAAY;UAACyD,SAAS,EAAC,gBAAgB;UAAAD,QAAA,EAAC;QAEzD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENlG,OAAA;QAAK8F,SAAS,EAAE,UAAUrF,UAAU,EAAG;QAAAoF,QAAA,EACpCtF;MAAM;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACNlG,OAAA;QAAK8F,SAAS,EAAE,UAAU3E,kBAAkB,GAAG,SAAS,GAAG,OAAO,EAAG;QAAA0E,QAAA,GAAC,6BACnD,EAAC1E,kBAAkB,GAAG,WAAW,GAAG,cAAc;MAAA;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB7F,OAAA;QAAA6F,QAAA,EAAI;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BlG,OAAA;QAAK8F,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAC5BlE,YAAY,CAAC6B,OAAO,gBACnBxD,OAAA;UAAA6F,QAAA,gBACE7F,OAAA;YAAA6F,QAAA,EAAI;UAAqB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9BlG,OAAA;YAAA6F,QAAA,GAAG,cAAY,EAAClE,YAAY,CAAC6B,OAAO;UAAA;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzClG,OAAA;YAAA6F,QAAA,GAAG,SAAO,EAAC,CAAAtE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE0B,OAAO,KAAI,SAAS;UAAA;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnDlG,OAAA;YAAA6F,QAAA,GAAG,UAAQ,EAAC1F,QAAQ,IAAI,SAAS;UAAA;YAAA4F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtClG,OAAA;YAAA6F,QAAA,GAAG,eAAa,EAACxF,UAAU;UAAA;YAAA0F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,gBAENlG,OAAA;UAAA6F,QAAA,gBACE7F,OAAA;YAAA6F,QAAA,EAAI;UAAkB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3BlG,OAAA;YAAA6F,QAAA,EAAG;UAA0D;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB7F,OAAA;QAAA6F,QAAA,EAAI;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BlG,OAAA;QAAK8F,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAC5B1E,kBAAkB,gBACjBnB,OAAA;UAAA6F,QAAA,gBACE7F,OAAA;YAAA6F,QAAA,EAAI;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5BlG,OAAA;YAAA6F,QAAA,EAAG;UAAqC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC5ClG,OAAA;YAAA6F,QAAA,GAAG,iCAAqB,EAACxE,eAAe,CAACwB,MAAM;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpDlG,OAAA;YAAA6F,QAAA,EAAG;UAA0C;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,gBAENlG,OAAA;UAAA6F,QAAA,gBACE7F,OAAA;YAAA6F,QAAA,EAAI;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5BlG,OAAA;YAAA6F,QAAA,EAAG;UAA+B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACtClG,OAAA;YAAA6F,QAAA,EAAG;UAA2D;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB7F,OAAA;QAAA6F,QAAA,EAAI;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBlG,OAAA;QAAK8F,SAAS,EAAC,iBAAiB;QAAAD,QAAA,eAC9B7F,OAAA;UAAK8F,SAAS,EAAE,iBAAiBjF,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAAgF,QAAA,gBAC7D7F,OAAA;YAAA6F,QAAA,EAAI;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvBlG,OAAA;YACEwH,GAAG,EAAE/F,QAAS;YACdgG,QAAQ;YACRC,WAAW;YACXC,KAAK;YACLf,KAAK,EAAE;cAAEgB,KAAK,EAAE,MAAM;cAAEZ,YAAY,EAAE,KAAK;cAAEa,UAAU,EAAE;YAAO;UAAE;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnE,CAAC,eACFlG,OAAA;YAAK8F,SAAS,EAAE,UAAUjF,WAAW,GAAG,SAAS,GAAG,MAAM,EAAG;YAAAgF,QAAA,EAC1DhF,WAAW,GAAG,WAAW,GAAG;UAAiB;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENlG,OAAA;MAAK8F,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxB7F,OAAA;QAAA6F,QAAA,EAAI;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BlG,OAAA;QAAK8F,SAAS,EAAC,KAAK;QAAAD,QAAA,EAAElF;MAAG;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChG,EAAA,CApaID,UAAU;AAAA6H,EAAA,GAAV7H,UAAU;AAsahB,eAAeA,UAAU;AAAC,IAAA6H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}