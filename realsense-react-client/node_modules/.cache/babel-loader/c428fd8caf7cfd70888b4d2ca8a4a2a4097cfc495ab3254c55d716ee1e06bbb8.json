{"ast":null,"code":"import io from 'socket.io-client';\nclass CloudSignalingService {\n  constructor() {\n    this.socket = null;\n    this.cloudUrl = process.env.REACT_APP_CLOUD_URL || 'http://localhost:3001';\n    this.isConnected = false;\n    this.availableRobots = [];\n    this.eventListeners = new Map();\n    this.clientId = this.generateClientId();\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      if (this.socket && this.isConnected) {\n        console.log('🌐 Already connected to cloud signaling server');\n        resolve();\n        return;\n      }\n      console.log(`🌐 Connecting to cloud signaling server: ${this.cloudUrl}`);\n      this.socket = io(this.cloudUrl, {\n        transports: ['websocket'],\n        timeout: 10000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n      this.socket.on('connect', () => {\n        console.log('✅ Connected to cloud signaling server');\n        this.isConnected = true;\n\n        // Register as client\n        this.socket.emit('client-register', {\n          clientId: this.clientId\n        });\n        resolve();\n      });\n      this.socket.on('available-robots', robots => {\n        this.availableRobots = robots;\n        console.log('🤖 Available robots:', robots);\n        this.emitEvent('available-robots', robots);\n      });\n      this.socket.on('robot-available', robot => {\n        this.availableRobots.push(robot);\n        console.log('🤖 Robot available:', robot);\n        this.emitEvent('robot-available', robot);\n      });\n      this.socket.on('robot-unavailable', robot => {\n        this.availableRobots = this.availableRobots.filter(r => r.robotId !== robot.robotId);\n        console.log('🤖 Robot unavailable:', robot);\n        this.emitEvent('robot-unavailable', robot);\n      });\n      this.socket.on('webrtc-offer', data => {\n        console.log('📤 Received WebRTC offer:', data);\n        this.emitEvent('webrtc-offer', data);\n      });\n      this.socket.on('ice-candidate', data => {\n        console.log('🧊 Received ICE candidate:', data);\n        this.emitEvent('ice-candidate', data);\n      });\n      this.socket.on('session-error', error => {\n        console.error('❌ Session error:', error);\n        this.emitEvent('session-error', error);\n      });\n      this.socket.on('session-closed', data => {\n        console.log('🗑️ Session closed:', data);\n        this.emitEvent('session-closed', data);\n      });\n      this.socket.on('connect_error', error => {\n        console.error('❌ Cloud connection error:', error);\n        this.isConnected = false;\n        reject(error);\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('❌ Disconnected from cloud server:', reason);\n        this.isConnected = false;\n        this.emitEvent('disconnected', {\n          reason\n        });\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log(`🔄 Reconnected to cloud server (attempt ${attemptNumber})`);\n        this.isConnected = true;\n        this.emitEvent('reconnected', {\n          attemptNumber\n        });\n      });\n\n      // Timeout for connection\n      setTimeout(() => {\n        if (!this.isConnected) {\n          reject(new Error('Connection timeout'));\n        }\n      }, 10000);\n    });\n  }\n  disconnect() {\n    if (this.socket && this.isConnected) {\n      console.log('🛑 Disconnecting from cloud signaling server');\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    } else {\n      console.log('🛑 Already disconnected from cloud signaling server');\n    }\n  }\n  async createSession(robotId, deviceId, streamTypes) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('Not connected to cloud server'));\n        return;\n      }\n      console.log(`📡 Creating session for robot ${robotId}, device ${deviceId}, streams: ${streamTypes}`);\n      this.socket.emit('create-session', {\n        robotId,\n        deviceId,\n        streamTypes\n      });\n\n      // Listen for the offer response\n      const offerHandler = data => {\n        resolve(data);\n        this.removeEventListener('webrtc-offer', offerHandler);\n      };\n      const errorHandler = error => {\n        reject(new Error(error.error || 'Failed to create session'));\n        this.removeEventListener('session-error', errorHandler);\n      };\n      this.addEventListener('webrtc-offer', offerHandler);\n      this.addEventListener('session-error', errorHandler);\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        this.removeEventListener('webrtc-offer', offerHandler);\n        this.removeEventListener('session-error', errorHandler);\n        reject(new Error('Session creation timeout'));\n      }, 10000);\n    });\n  }\n  sendAnswer(sessionId, answer) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`📤 Sending WebRTC answer for session ${sessionId}`);\n    this.socket.emit('webrtc-answer', {\n      sessionId,\n      answer\n    });\n  }\n  sendIceCandidate(sessionId, candidate) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`🧊 Sending ICE candidate for session ${sessionId}`);\n    this.socket.emit('ice-candidate', {\n      sessionId,\n      candidate\n    });\n  }\n  closeSession(sessionId) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`🗑️ Closing session ${sessionId}`);\n    this.socket.emit('close-session', {\n      sessionId\n    });\n  }\n  switchStreamType(sessionId, streamTypes) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`🔄 Switching stream type for session ${sessionId} to ${streamTypes}`);\n    console.log(`📡 Emitting switch-stream-type event:`, {\n      sessionId,\n      streamTypes\n    });\n    this.socket.emit('switch-stream-type', {\n      sessionId,\n      streamTypes\n    });\n    console.log(`✅ switch-stream-type event emitted`);\n  }\n  getPointCloudData(deviceId) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('Not connected to cloud server'));\n        return;\n      }\n      console.log(`📊 Requesting point cloud data for device ${deviceId}`);\n      const timeout = setTimeout(() => {\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        reject(new Error('Point cloud data request timeout'));\n      }, 10000);\n      const dataHandler = data => {\n        clearTimeout(timeout);\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        resolve(data);\n      };\n      const errorHandler = error => {\n        clearTimeout(timeout);\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        reject(new Error(error.error || 'Point cloud data request failed'));\n      };\n      this.addEventListener('pointcloud-data', dataHandler);\n      this.addEventListener('pointcloud-error', errorHandler);\n      this.socket.emit('get-pointcloud-data', {\n        deviceId\n      });\n    });\n  }\n  activatePointCloud(deviceId, activate) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`🎯 ${activate ? 'Activating' : 'Deactivating'} point cloud for device ${deviceId}`);\n    this.socket.emit('activate-pointcloud', {\n      deviceId,\n      activate\n    });\n  }\n  startDeviceStream(deviceId, streamConfigs) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`🚀 Starting device stream for ${deviceId} with configs:`, streamConfigs);\n    this.socket.emit('start-device-stream', {\n      deviceId,\n      streamConfigs\n    });\n  }\n  stopDeviceStream(deviceId) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n    console.log(`⏹️ Stopping device stream for ${deviceId}`);\n    this.socket.emit('stop-device-stream', {\n      deviceId\n    });\n  }\n  getAvailableRobots() {\n    return this.availableRobots;\n  }\n  getPeerConnection(sessionId) {\n    // This method should return the WebRTC peer connection for the given session\n    // For now, we'll need to access it from the WebRTC manager\n    if (window.webrtcManager && window.webrtcManager.sessions && window.webrtcManager.sessions[sessionId]) {\n      return window.webrtcManager.sessions[sessionId].pc;\n    }\n    return null;\n  }\n  addEventListener(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n  removeEventListener(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emitEvent(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n  generateClientId() {\n    return 'client-' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      cloudUrl: this.cloudUrl,\n      clientId: this.clientId,\n      availableRobots: this.availableRobots.length\n    };\n  }\n}\n\n// Create singleton instance\nconst cloudSignalingService = new CloudSignalingService();\nexport default cloudSignalingService;","map":{"version":3,"names":["io","CloudSignalingService","constructor","socket","cloudUrl","process","env","REACT_APP_CLOUD_URL","isConnected","availableRobots","eventListeners","Map","clientId","generateClientId","connect","Promise","resolve","reject","console","log","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","emit","robots","emitEvent","robot","push","filter","r","robotId","data","error","reason","attemptNumber","setTimeout","Error","disconnect","createSession","deviceId","streamTypes","offerHandler","removeEventListener","errorHandler","addEventListener","sendAnswer","sessionId","answer","sendIceCandidate","candidate","closeSession","switchStreamType","getPointCloudData","dataHandler","clearTimeout","activatePointCloud","activate","startDeviceStream","streamConfigs","stopDeviceStream","getAvailableRobots","getPeerConnection","window","webrtcManager","sessions","pc","event","callback","has","set","get","listeners","index","indexOf","splice","forEach","Math","random","toString","substring","getConnectionStatus","length","cloudSignalingService"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/services/cloudSignalingService.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass CloudSignalingService {\n  constructor() {\n    this.socket = null;\n    this.cloudUrl = process.env.REACT_APP_CLOUD_URL || 'http://localhost:3001';\n    this.isConnected = false;\n    this.availableRobots = [];\n    this.eventListeners = new Map();\n    this.clientId = this.generateClientId();\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      if (this.socket && this.isConnected) {\n        console.log('🌐 Already connected to cloud signaling server');\n        resolve();\n        return;\n      }\n\n      console.log(`🌐 Connecting to cloud signaling server: ${this.cloudUrl}`);\n      \n      this.socket = io(this.cloudUrl, {\n        transports: ['websocket'],\n        timeout: 10000,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      this.socket.on('connect', () => {\n        console.log('✅ Connected to cloud signaling server');\n        this.isConnected = true;\n        \n        // Register as client\n        this.socket.emit('client-register', { clientId: this.clientId });\n        resolve();\n      });\n\n      this.socket.on('available-robots', (robots) => {\n        this.availableRobots = robots;\n        console.log('🤖 Available robots:', robots);\n        this.emitEvent('available-robots', robots);\n      });\n\n      this.socket.on('robot-available', (robot) => {\n        this.availableRobots.push(robot);\n        console.log('🤖 Robot available:', robot);\n        this.emitEvent('robot-available', robot);\n      });\n\n      this.socket.on('robot-unavailable', (robot) => {\n        this.availableRobots = this.availableRobots.filter(r => r.robotId !== robot.robotId);\n        console.log('🤖 Robot unavailable:', robot);\n        this.emitEvent('robot-unavailable', robot);\n      });\n\n      this.socket.on('webrtc-offer', (data) => {\n        console.log('📤 Received WebRTC offer:', data);\n        this.emitEvent('webrtc-offer', data);\n      });\n\n      this.socket.on('ice-candidate', (data) => {\n        console.log('🧊 Received ICE candidate:', data);\n        this.emitEvent('ice-candidate', data);\n      });\n\n      this.socket.on('session-error', (error) => {\n        console.error('❌ Session error:', error);\n        this.emitEvent('session-error', error);\n      });\n\n      this.socket.on('session-closed', (data) => {\n        console.log('🗑️ Session closed:', data);\n        this.emitEvent('session-closed', data);\n      });\n\n      this.socket.on('connect_error', (error) => {\n        console.error('❌ Cloud connection error:', error);\n        this.isConnected = false;\n        reject(error);\n      });\n\n      this.socket.on('disconnect', (reason) => {\n        console.log('❌ Disconnected from cloud server:', reason);\n        this.isConnected = false;\n        this.emitEvent('disconnected', { reason });\n      });\n\n      this.socket.on('reconnect', (attemptNumber) => {\n        console.log(`🔄 Reconnected to cloud server (attempt ${attemptNumber})`);\n        this.isConnected = true;\n        this.emitEvent('reconnected', { attemptNumber });\n      });\n\n      // Timeout for connection\n      setTimeout(() => {\n        if (!this.isConnected) {\n          reject(new Error('Connection timeout'));\n        }\n      }, 10000);\n    });\n  }\n\n  disconnect() {\n    if (this.socket && this.isConnected) {\n      console.log('🛑 Disconnecting from cloud signaling server');\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    } else {\n      console.log('🛑 Already disconnected from cloud signaling server');\n    }\n  }\n\n  async createSession(robotId, deviceId, streamTypes) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('Not connected to cloud server'));\n        return;\n      }\n\n      console.log(`📡 Creating session for robot ${robotId}, device ${deviceId}, streams: ${streamTypes}`);\n\n      this.socket.emit('create-session', {\n        robotId,\n        deviceId,\n        streamTypes\n      });\n\n      // Listen for the offer response\n      const offerHandler = (data) => {\n        resolve(data);\n        this.removeEventListener('webrtc-offer', offerHandler);\n      };\n\n      const errorHandler = (error) => {\n        reject(new Error(error.error || 'Failed to create session'));\n        this.removeEventListener('session-error', errorHandler);\n      };\n\n      this.addEventListener('webrtc-offer', offerHandler);\n      this.addEventListener('session-error', errorHandler);\n\n      // Timeout after 10 seconds\n      setTimeout(() => {\n        this.removeEventListener('webrtc-offer', offerHandler);\n        this.removeEventListener('session-error', errorHandler);\n        reject(new Error('Session creation timeout'));\n      }, 10000);\n    });\n  }\n\n  sendAnswer(sessionId, answer) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`📤 Sending WebRTC answer for session ${sessionId}`);\n    this.socket.emit('webrtc-answer', { sessionId, answer });\n  }\n\n  sendIceCandidate(sessionId, candidate) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`🧊 Sending ICE candidate for session ${sessionId}`);\n    this.socket.emit('ice-candidate', { sessionId, candidate });\n  }\n\n  closeSession(sessionId) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`🗑️ Closing session ${sessionId}`);\n    this.socket.emit('close-session', { sessionId });\n  }\n\n  switchStreamType(sessionId, streamTypes) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`🔄 Switching stream type for session ${sessionId} to ${streamTypes}`);\n    console.log(`📡 Emitting switch-stream-type event:`, { sessionId, streamTypes });\n    this.socket.emit('switch-stream-type', { sessionId, streamTypes });\n    console.log(`✅ switch-stream-type event emitted`);\n  }\n\n  getPointCloudData(deviceId) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('Not connected to cloud server'));\n        return;\n      }\n\n      console.log(`📊 Requesting point cloud data for device ${deviceId}`);\n      \n      const timeout = setTimeout(() => {\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        reject(new Error('Point cloud data request timeout'));\n      }, 10000);\n\n      const dataHandler = (data) => {\n        clearTimeout(timeout);\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        resolve(data);\n      };\n\n      const errorHandler = (error) => {\n        clearTimeout(timeout);\n        this.removeEventListener('pointcloud-data', dataHandler);\n        this.removeEventListener('pointcloud-error', errorHandler);\n        reject(new Error(error.error || 'Point cloud data request failed'));\n      };\n\n      this.addEventListener('pointcloud-data', dataHandler);\n      this.addEventListener('pointcloud-error', errorHandler);\n\n      this.socket.emit('get-pointcloud-data', { deviceId });\n    });\n  }\n\n  activatePointCloud(deviceId, activate) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`🎯 ${activate ? 'Activating' : 'Deactivating'} point cloud for device ${deviceId}`);\n    this.socket.emit('activate-pointcloud', { deviceId, activate });\n  }\n\n  startDeviceStream(deviceId, streamConfigs) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`🚀 Starting device stream for ${deviceId} with configs:`, streamConfigs);\n    this.socket.emit('start-device-stream', { deviceId, streamConfigs });\n  }\n\n  stopDeviceStream(deviceId) {\n    if (!this.isConnected) {\n      throw new Error('Not connected to cloud server');\n    }\n\n    console.log(`⏹️ Stopping device stream for ${deviceId}`);\n    this.socket.emit('stop-device-stream', { deviceId });\n  }\n\n  getAvailableRobots() {\n    return this.availableRobots;\n  }\n\n  getPeerConnection(sessionId) {\n    // This method should return the WebRTC peer connection for the given session\n    // For now, we'll need to access it from the WebRTC manager\n    if (window.webrtcManager && window.webrtcManager.sessions && window.webrtcManager.sessions[sessionId]) {\n      return window.webrtcManager.sessions[sessionId].pc;\n    }\n    return null;\n  }\n\n  addEventListener(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  removeEventListener(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emitEvent(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  generateClientId() {\n    return 'client-' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      cloudUrl: this.cloudUrl,\n      clientId: this.clientId,\n      availableRobots: this.availableRobots.length\n    };\n  }\n}\n\n// Create singleton instance\nconst cloudSignalingService = new CloudSignalingService();\nexport default cloudSignalingService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}