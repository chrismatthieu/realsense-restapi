{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport cloudSignalingService from '../services/cloudSignalingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointCloudDemo = () => {\n  _s();\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [sessionId, setSessionId] = useState(null);\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const discoverRobots = async () => {\n    try {\n      logMessage('🔍 Discovering available robots...');\n      const availableRobots = await cloudSignalingService.getAvailableRobots();\n      setRobots(availableRobots);\n      logMessage(`✅ Found ${availableRobots.length} robot(s): ${availableRobots.map(r => r.robotId).join(', ')}`);\n    } catch (error) {\n      logMessage(`❌ Failed to discover robots: ${error.message}`);\n    }\n  };\n  const connectToCloud = async () => {\n    try {\n      logMessage('🌐 Connecting to cloud signaling server...');\n      await cloudSignalingService.connect();\n      setIsConnected(true);\n      setConnectionStatus('Connected');\n      logMessage('✅ Connected to cloud signaling server');\n\n      // Discover robots after connecting\n      await discoverRobots();\n    } catch (error) {\n      logMessage(`❌ Failed to connect to cloud: ${error.message}`);\n      setConnectionStatus('Connection Failed');\n    }\n  };\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, canvasRef.current.clientWidth / canvasRef.current.clientHeight, 0.1, 1000);\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true\n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n    logMessage('Three.js initialized');\n  };\n  const updatePointCloud = async () => {\n    if (!isViewerRunningRef.current || !selectedRobot) return;\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage(`Fetching point cloud data for device: ${deviceId}`);\n      const data = await cloudSignalingService.getPointCloudData(deviceId);\n      logMessage(`Received data: ${JSON.stringify(data).substring(0, 200)}...`);\n      logMessage(`Data type: ${typeof data}, vertices type: ${typeof data.vertices}`);\n      if (!data.vertices || data.vertices.length === 0) {\n        logMessage('No vertices data found');\n        setPointCloudStatus('No data');\n        return;\n      }\n      logMessage(`Vertices array length: ${data.vertices.length}`);\n\n      // Handle different data formats\n      let vertexArray;\n      if (Array.isArray(data.vertices)) {\n        // Direct array format\n        vertexArray = data.vertices;\n      } else if (typeof data.vertices === 'string') {\n        // Base64 encoded format - skip for now\n        logMessage('Received base64 encoded data, skipping this update');\n        return;\n      } else {\n        logMessage('Unknown vertices format, skipping this update');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertexArray.length; i++) {\n        const vertex = vertexArray[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      const vertices = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertexArray.length} input vertices`);\n\n      // Debug: Show first few vertices\n      if (flatVertices.length > 0) {\n        logMessage(`First vertex: [${flatVertices[0]}, ${flatVertices[1]}, ${flatVertices[2]}]`);\n        if (flatVertices.length >= 6) {\n          logMessage(`Second vertex: [${flatVertices[3]}, ${flatVertices[4]}, ${flatVertices[5]}]`);\n        }\n      }\n      setVertexCount(vertices.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        // Smaller points\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        // Full opacity\n        sizeAttenuation: true\n      });\n      logMessage('Created point cloud material');\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        // Initial setup\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage(`Initialized camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      } else {\n        // Preserve user's view\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n        logMessage(`Preserved camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      }\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertices.length / 3} vertices`);\n    } catch (error) {\n      logMessage(`Error updating point cloud: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n  const animate = currentTime => {\n    if (!isViewerRunningRef.current) return;\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n  const startPointCloudViewer = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n\n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Start a WebRTC session for depth stream to enable point cloud data\n      try {\n        logMessage('Starting WebRTC depth stream session...');\n        const newSessionId = await cloudSignalingService.createSession(selectedRobot, deviceId, ['depth']);\n        setSessionId(newSessionId);\n        logMessage(`WebRTC depth session created: ${newSessionId}`);\n\n        // Wait a moment for the session to establish\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n        // Activate point cloud processing\n        logMessage('Activating point cloud processing...');\n        await cloudSignalingService.activatePointCloud(deviceId, true);\n        logMessage('Point cloud processing activated');\n\n        // Set up WebRTC data channel for point cloud data\n        setupWebRTCDataChannel(newSessionId);\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n      logMessage('3D point cloud viewer started successfully');\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n  const setupWebRTCDataChannel = sessionId => {\n    try {\n      // Get the WebRTC peer connection from the signaling service\n      const peerConnection = cloudSignalingService.getPeerConnection(sessionId);\n      if (!peerConnection) {\n        logMessage('❌ No peer connection available for data channel');\n        return;\n      }\n\n      // Create data channel for receiving point cloud data\n      const dataChannel = peerConnection.createDataChannel('pointcloud-data');\n      dataChannel.onopen = () => {\n        logMessage('📡 WebRTC data channel opened for point cloud data');\n      };\n      dataChannel.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'pointcloud-data' && data.vertices) {\n            logMessage(`📡 Received point cloud data: ${data.vertices.length} vertices`);\n\n            // Update the point cloud with the received data\n            updatePointCloudWithData(data.vertices);\n          }\n        } catch (error) {\n          logMessage(`❌ Error parsing point cloud data: ${error.message}`);\n        }\n      };\n      dataChannel.onclose = () => {\n        logMessage('📡 WebRTC data channel closed');\n      };\n      dataChannel.onerror = error => {\n        logMessage(`❌ WebRTC data channel error: ${error.message}`);\n      };\n      logMessage('✅ WebRTC data channel setup complete');\n    } catch (error) {\n      logMessage(`❌ Error setting up WebRTC data channel: ${error.message}`);\n    }\n  };\n  const updatePointCloudWithData = vertices => {\n    try {\n      if (!vertices || vertices.length === 0) {\n        logMessage('No vertices data received');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      const vertexArray = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertices.length} input vertices`);\n      setVertexCount(vertexArray.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        sizeAttenuation: true\n      });\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n      } else {\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n      }\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertexArray.length / 3} vertices`);\n    } catch (error) {\n      logMessage(`Error updating point cloud with data: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage('Resetting device...');\n\n      // Close WebRTC session if exists\n      if (sessionId) {\n        try {\n          await cloudSignalingService.closeSession(sessionId);\n          logMessage('Closed WebRTC session');\n        } catch (error) {\n          logMessage(`Warning: ${error.message}`);\n        }\n      }\n\n      // Deactivate point cloud processing\n      try {\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up WebRTC session if it exists\n    if (sessionId) {\n      try {\n        logMessage('Cleaning up WebRTC session...');\n        await cloudSignalingService.closeSession(sessionId);\n        logMessage('WebRTC session cleaned up');\n\n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        const deviceId = selectedRobot.replace('robot-', '');\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Point cloud processing deactivated');\n\n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        logMessage(`Warning: Failed to clean up WebRTC session: ${error.message}`);\n      }\n    }\n\n    // Clear session ID\n    setSessionId(null);\n    logMessage('3D point cloud viewer stopped');\n  };\n  const handleKeyPress = useCallback(event => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n  useEffect(() => {\n    // Initialize Three.js on component mount\n    initThreeJS();\n\n    // Connect to cloud server on mount\n    connectToCloud();\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n\n      // Cleanup on unmount\n      if (selectedRobot) {\n        const deviceId = selectedRobot.replace('robot-', '');\n        // Clean up any active streams\n        try {\n          cloudSignalingService.stopDeviceStream(deviceId);\n          cloudSignalingService.activatePointCloud(deviceId, false);\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n      cloudSignalingService.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF RealSense 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Interactive 3D visualization of RealSense depth data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"robotSelect\",\n          children: \"Select Robot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"robotSelect\",\n          value: selectedRobot,\n          onChange: e => setSelectedRobot(e.target.value),\n          disabled: !isConnected,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a robot...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this), robots.map(robot => {\n            var _robot$deviceInfo;\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: robot.robotId,\n              children: [robot.robotId, \" - \", ((_robot$deviceInfo = robot.deviceInfo) === null || _robot$deviceInfo === void 0 ? void 0 : _robot$deviceInfo.name) || 'Unknown Device']\n            }, robot.robotId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverRobots,\n          className: \"button\",\n          disabled: !isConnected,\n          children: \"\\uD83D\\uDD0D Discover Robots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startPointCloudViewer,\n          className: \"button success\",\n          disabled: isViewerRunning || !selectedRobot,\n          children: \"\\u25B6\\uFE0F Start 3D Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopPointCloudViewer,\n          className: \"button danger\",\n          disabled: !isViewerRunning,\n          children: \"\\u23F9\\uFE0F Stop Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          disabled: !selectedRobot,\n          children: \"\\uD83D\\uDD04 Reset Device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Cloud Connection:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 19\n            }, this), \" \", isConnected ? 'Connected' : 'Disconnected']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Point Cloud:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 19\n            }, this), \" \", pointCloudStatus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Vertices:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 19\n            }, this), \" \", vertexCount.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"FPS:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 19\n            }, this), \" \", fps]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${isConnected ? 'success' : 'error'}`,\n        children: [\"\\uD83C\\uDF10 Cloud Signaling Server: \", isConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAE 3D Viewer Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mouse Controls:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Left Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 17\n            }, this), \" Rotate camera around target\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Right Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this), \" Pan camera\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Scroll Wheel:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this), \" Zoom in/out\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"R Key:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this), \" Reset camera to initial position\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'rgba(0, 0, 0, 0.8)',\n          borderRadius: '15px',\n          padding: '20px',\n          height: '600px',\n          position: 'relative',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            width: '100%',\n            height: '100%',\n            borderRadius: '10px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this), !isViewerRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '18px',\n            color: '#ffd700'\n          },\n          children: \"Click \\\"Start 3D Viewer\\\" to begin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), isViewerRunning && vertexCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            background: 'rgba(0, 0, 0, 0.7)',\n            padding: '10px',\n            borderRadius: '8px',\n            fontSize: '14px',\n            color: 'white'\n          },\n          children: [\"Points: \", vertexCount.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n};\n_s(PointCloudDemo, \"jPnwLP2wgRedsAdHy5st8ybjtLQ=\");\n_c = PointCloudDemo;\nexport default PointCloudDemo;\nvar _c;\n$RefreshReg$(_c, \"PointCloudDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","THREE","OrbitControls","cloudSignalingService","jsxDEV","_jsxDEV","PointCloudDemo","_s","robots","setRobots","selectedRobot","setSelectedRobot","isViewerRunning","setIsViewerRunning","connectionStatus","setConnectionStatus","sessionId","setSessionId","pointCloudStatus","setPointCloudStatus","vertexCount","setVertexCount","fps","setFps","isConnected","setIsConnected","isViewerRunningRef","updateIntervalRef","log","setLog","canvasRef","sceneRef","cameraRef","rendererRef","controlsRef","pointCloudRef","animationIdRef","frameCountRef","lastTimeRef","hasInitializedCameraRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","discoverRobots","availableRobots","getAvailableRobots","length","map","r","robotId","join","error","connectToCloud","connect","initThreeJS","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","canvas","antialias","setSize","setPixelRatio","window","devicePixelRatio","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","gridHelper","GridHelper","axesHelper","AxesHelper","updatePointCloud","deviceId","replace","data","getPointCloudData","JSON","stringify","substring","vertices","vertexArray","Array","isArray","flatVertices","i","vertex","x","y","z","isNaN","isFinite","push","Float32Array","currentCameraPosition","clone","currentTarget","target","remove","geometry","dispose","material","BufferGeometry","setAttribute","BufferAttribute","attributes","count","PointsMaterial","size","color","transparent","opacity","sizeAttenuation","pointCloud","Points","children","copy","animate","currentTime","requestAnimationFrame","update","render","startPointCloudViewer","alert","newSessionId","createSession","Promise","resolve","setTimeout","activatePointCloud","setupWebRTCDataChannel","setInterval","clearInterval","peerConnection","getPeerConnection","dataChannel","createDataChannel","onopen","onmessage","event","parse","type","updatePointCloudWithData","onclose","onerror","resetDevice","closeSession","stopPointCloudViewer","cancelAnimationFrame","handleKeyPress","key","addEventListener","removeEventListener","stopDeviceStream","disconnect","handleResize","width","height","aspect","updateProjectionMatrix","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","disabled","robot","_robot$deviceInfo","deviceInfo","name","onClick","style","display","justifyContent","alignItems","toLocaleString","borderRadius","padding","overflow","ref","top","left","transform","fontSize","right","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport cloudSignalingService from '../services/cloudSignalingService';\n\nconst PointCloudDemo = () => {\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [sessionId, setSessionId] = useState(null);\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  \n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const discoverRobots = async () => {\n    try {\n      logMessage('🔍 Discovering available robots...');\n      const availableRobots = await cloudSignalingService.getAvailableRobots();\n      setRobots(availableRobots);\n      logMessage(`✅ Found ${availableRobots.length} robot(s): ${availableRobots.map(r => r.robotId).join(', ')}`);\n    } catch (error) {\n      logMessage(`❌ Failed to discover robots: ${error.message}`);\n    }\n  };\n\n  const connectToCloud = async () => {\n    try {\n      logMessage('🌐 Connecting to cloud signaling server...');\n      await cloudSignalingService.connect();\n      setIsConnected(true);\n      setConnectionStatus('Connected');\n      logMessage('✅ Connected to cloud signaling server');\n      \n      // Discover robots after connecting\n      await discoverRobots();\n    } catch (error) {\n      logMessage(`❌ Failed to connect to cloud: ${error.message}`);\n      setConnectionStatus('Connection Failed');\n    }\n  };\n\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvasRef.current.clientWidth / canvasRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      canvas: canvasRef.current,\n      antialias: true \n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n\n    logMessage('Three.js initialized');\n  };\n\n  const updatePointCloud = async () => {\n    if (!isViewerRunningRef.current || !selectedRobot) return;\n\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage(`Fetching point cloud data for device: ${deviceId}`);\n      const data = await cloudSignalingService.getPointCloudData(deviceId);\n\n      logMessage(`Received data: ${JSON.stringify(data).substring(0, 200)}...`);\n      logMessage(`Data type: ${typeof data}, vertices type: ${typeof data.vertices}`);\n\n      if (!data.vertices || data.vertices.length === 0) {\n        logMessage('No vertices data found');\n        setPointCloudStatus('No data');\n        return;\n      }\n\n      logMessage(`Vertices array length: ${data.vertices.length}`);\n      \n      // Handle different data formats\n      let vertexArray;\n      if (Array.isArray(data.vertices)) {\n        // Direct array format\n        vertexArray = data.vertices;\n      } else if (typeof data.vertices === 'string') {\n        // Base64 encoded format - skip for now\n        logMessage('Received base64 encoded data, skipping this update');\n        return;\n      } else {\n        logMessage('Unknown vertices format, skipping this update');\n        return;\n      }\n      \n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertexArray.length; i++) {\n        const vertex = vertexArray[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && \n              isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      \n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      \n      const vertices = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertexArray.length} input vertices`);\n      \n      // Debug: Show first few vertices\n      if (flatVertices.length > 0) {\n        logMessage(`First vertex: [${flatVertices[0]}, ${flatVertices[1]}, ${flatVertices[2]}]`);\n        if (flatVertices.length >= 6) {\n          logMessage(`Second vertex: [${flatVertices[3]}, ${flatVertices[4]}, ${flatVertices[5]}]`);\n        }\n      }\n      \n      setVertexCount(vertices.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01, // Smaller points\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0, // Full opacity\n        sizeAttenuation: true\n      });\n      logMessage('Created point cloud material');\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        // Initial setup\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage(`Initialized camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      } else {\n        // Preserve user's view\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n        logMessage(`Preserved camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      }\n\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertices.length / 3} vertices`);\n\n    } catch (error) {\n      logMessage(`Error updating point cloud: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const animate = (currentTime) => {\n    if (!isViewerRunningRef.current) return;\n\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n\n  const startPointCloudViewer = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      \n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Start a WebRTC session for depth stream to enable point cloud data\n      try {\n        logMessage('Starting WebRTC depth stream session...');\n        const newSessionId = await cloudSignalingService.createSession(selectedRobot, deviceId, ['depth']);\n        setSessionId(newSessionId);\n        logMessage(`WebRTC depth session created: ${newSessionId}`);\n\n        // Wait a moment for the session to establish\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n        // Activate point cloud processing\n        logMessage('Activating point cloud processing...');\n        await cloudSignalingService.activatePointCloud(deviceId, true);\n        logMessage('Point cloud processing activated');\n\n        // Set up WebRTC data channel for point cloud data\n        setupWebRTCDataChannel(newSessionId);\n\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n\n      logMessage('3D point cloud viewer started successfully');\n\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const setupWebRTCDataChannel = (sessionId) => {\n    try {\n      // Get the WebRTC peer connection from the signaling service\n      const peerConnection = cloudSignalingService.getPeerConnection(sessionId);\n      \n      if (!peerConnection) {\n        logMessage('❌ No peer connection available for data channel');\n        return;\n      }\n\n      // Create data channel for receiving point cloud data\n      const dataChannel = peerConnection.createDataChannel('pointcloud-data');\n      \n      dataChannel.onopen = () => {\n        logMessage('📡 WebRTC data channel opened for point cloud data');\n      };\n\n      dataChannel.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          \n          if (data.type === 'pointcloud-data' && data.vertices) {\n            logMessage(`📡 Received point cloud data: ${data.vertices.length} vertices`);\n            \n            // Update the point cloud with the received data\n            updatePointCloudWithData(data.vertices);\n          }\n        } catch (error) {\n          logMessage(`❌ Error parsing point cloud data: ${error.message}`);\n        }\n      };\n\n      dataChannel.onclose = () => {\n        logMessage('📡 WebRTC data channel closed');\n      };\n\n      dataChannel.onerror = (error) => {\n        logMessage(`❌ WebRTC data channel error: ${error.message}`);\n      };\n\n      logMessage('✅ WebRTC data channel setup complete');\n\n    } catch (error) {\n      logMessage(`❌ Error setting up WebRTC data channel: ${error.message}`);\n    }\n  };\n\n  const updatePointCloudWithData = (vertices) => {\n    try {\n      if (!vertices || vertices.length === 0) {\n        logMessage('No vertices data received');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && \n              isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      \n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      \n      const vertexArray = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertices.length} input vertices`);\n      \n      setVertexCount(vertexArray.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertexArray, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        sizeAttenuation: true\n      });\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n      } else {\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n      }\n\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertexArray.length / 3} vertices`);\n\n    } catch (error) {\n      logMessage(`Error updating point cloud with data: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      alert('Please select a robot first');\n      return;\n    }\n\n    try {\n      const deviceId = selectedRobot.replace('robot-', '');\n      logMessage('Resetting device...');\n      \n      // Close WebRTC session if exists\n      if (sessionId) {\n        try {\n          await cloudSignalingService.closeSession(sessionId);\n          logMessage('Closed WebRTC session');\n        } catch (error) {\n          logMessage(`Warning: ${error.message}`);\n        }\n      }\n      \n      // Deactivate point cloud processing\n      try {\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n      \n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up WebRTC session if it exists\n    if (sessionId) {\n      try {\n        logMessage('Cleaning up WebRTC session...');\n        await cloudSignalingService.closeSession(sessionId);\n        logMessage('WebRTC session cleaned up');\n    \n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        const deviceId = selectedRobot.replace('robot-', '');\n        await cloudSignalingService.activatePointCloud(deviceId, false);\n        logMessage('Point cloud processing deactivated');\n    \n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n    \n      } catch (error) {\n        logMessage(`Warning: Failed to clean up WebRTC session: ${error.message}`);\n      }\n    }\n    \n    // Clear session ID\n    setSessionId(null);\n\n    logMessage('3D point cloud viewer stopped');\n  };\n\n\n\n  const handleKeyPress = useCallback((event) => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n\n  useEffect(() => {\n    // Initialize Three.js on component mount\n    initThreeJS();\n\n    // Connect to cloud server on mount\n    connectToCloud();\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n      \n      // Cleanup on unmount\n      if (selectedRobot) {\n        const deviceId = selectedRobot.replace('robot-', '');\n        // Clean up any active streams\n        try {\n          cloudSignalingService.stopDeviceStream(deviceId);\n          cloudSignalingService.activatePointCloud(deviceId, false);\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n      \n      cloudSignalingService.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🎯 RealSense 3D Point Cloud Viewer</h2>\n        <p>Interactive 3D visualization of RealSense depth data</p>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"robotSelect\">Select Robot:</label>\n          <select\n            id=\"robotSelect\"\n            value={selectedRobot}\n            onChange={(e) => setSelectedRobot(e.target.value)}\n            disabled={!isConnected}\n          >\n            <option value=\"\">Select a robot...</option>\n            {robots.map((robot) => (\n              <option key={robot.robotId} value={robot.robotId}>\n                {robot.robotId} - {robot.deviceInfo?.name || 'Unknown Device'}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div>\n          <button onClick={discoverRobots} className=\"button\" disabled={!isConnected}>\n            🔍 Discover Robots\n          </button>\n          <button \n            onClick={startPointCloudViewer} \n            className=\"button success\"\n            disabled={isViewerRunning || !selectedRobot}\n          >\n            ▶️ Start 3D Viewer\n          </button>\n          <button \n            onClick={stopPointCloudViewer} \n            className=\"button danger\"\n            disabled={!isViewerRunning}\n          >\n            ⏹️ Stop Viewer\n          </button>\n          <button \n            onClick={resetDevice} \n            className=\"button warning\"\n            disabled={!selectedRobot}\n          >\n            🔄 Reset Device\n          </button>\n        </div>\n\n        <div className=\"status info\">\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span><strong>Cloud Connection:</strong> {isConnected ? 'Connected' : 'Disconnected'}</span>\n            <span><strong>Point Cloud:</strong> {pointCloudStatus}</span>\n            <span><strong>Vertices:</strong> {vertexCount.toLocaleString()}</span>\n            <span><strong>FPS:</strong> {fps}</span>\n          </div>\n        </div>\n        <div className={`status ${isConnected ? 'success' : 'error'}`}>\n          🌐 Cloud Signaling Server: {isConnected ? 'Connected' : 'Disconnected'}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎮 3D Viewer Controls</h2>\n        <div className=\"sessions-panel\">\n          <h3>Mouse Controls:</h3>\n          <ul>\n            <li><strong>Left Click + Drag:</strong> Rotate camera around target</li>\n            <li><strong>Right Click + Drag:</strong> Pan camera</li>\n            <li><strong>Scroll Wheel:</strong> Zoom in/out</li>\n            <li><strong>R Key:</strong> Reset camera to initial position</li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 3D Point Cloud Viewer</h2>\n        <div style={{ \n          background: 'rgba(0, 0, 0, 0.8)', \n          borderRadius: '15px', \n          padding: '20px', \n          height: '600px', \n          position: 'relative', \n          overflow: 'hidden' \n        }}>\n          <canvas\n            ref={canvasRef}\n            style={{\n              width: '100%',\n              height: '100%',\n              borderRadius: '10px',\n              display: 'block'\n            }}\n          />\n          {!isViewerRunning && (\n            <div style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              fontSize: '18px',\n              color: '#ffd700'\n            }}>\n              Click \"Start 3D Viewer\" to begin\n            </div>\n          )}\n          {isViewerRunning && vertexCount > 0 && (\n            <div style={{\n              position: 'absolute',\n              top: '20px',\n              right: '20px',\n              background: 'rgba(0, 0, 0, 0.7)',\n              padding: '10px',\n              borderRadius: '8px',\n              fontSize: '14px',\n              color: 'white'\n            }}>\n              Points: {vertexCount.toLocaleString()}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointCloudDemo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,OAAOC,qBAAqB,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,cAAc,CAAC;EACxE,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,SAAS,CAAC;EACnE,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACyB,GAAG,EAAEC,MAAM,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAM6B,kBAAkB,GAAG3B,MAAM,CAAC,KAAK,CAAC;EACxC,MAAM4B,iBAAiB,GAAG5B,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC6B,GAAG,EAAEC,MAAM,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAElC,MAAMiC,SAAS,GAAG/B,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMgC,QAAQ,GAAGhC,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMiC,SAAS,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMkC,WAAW,GAAGlC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMmC,WAAW,GAAGnC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMoC,aAAa,GAAGpC,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMqC,cAAc,GAAGrC,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMsC,aAAa,GAAGtC,MAAM,CAAC,CAAC,CAAC;EAC/B,MAAMuC,WAAW,GAAGvC,MAAM,CAAC,CAAC,CAAC;EAC7B,MAAMwC,uBAAuB,GAAGxC,MAAM,CAAC,KAAK,CAAC;EAE7C,MAAMyC,UAAU,GAAGxC,WAAW,CAAEyC,OAAO,IAAK;IAC1C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IACjDf,MAAM,CAACgB,IAAI,IAAI,IAAIH,SAAS,KAAKD,OAAO,KAAKI,IAAI,EAAE,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFN,UAAU,CAAC,oCAAoC,CAAC;MAChD,MAAMO,eAAe,GAAG,MAAM5C,qBAAqB,CAAC6C,kBAAkB,CAAC,CAAC;MACxEvC,SAAS,CAACsC,eAAe,CAAC;MAC1BP,UAAU,CAAC,WAAWO,eAAe,CAACE,MAAM,cAAcF,eAAe,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC7G,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdd,UAAU,CAAC,gCAAgCc,KAAK,CAACb,OAAO,EAAE,CAAC;IAC7D;EACF,CAAC;EAED,MAAMc,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFf,UAAU,CAAC,4CAA4C,CAAC;MACxD,MAAMrC,qBAAqB,CAACqD,OAAO,CAAC,CAAC;MACrC/B,cAAc,CAAC,IAAI,CAAC;MACpBV,mBAAmB,CAAC,WAAW,CAAC;MAChCyB,UAAU,CAAC,uCAAuC,CAAC;;MAEnD;MACA,MAAMM,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdd,UAAU,CAAC,iCAAiCc,KAAK,CAACb,OAAO,EAAE,CAAC;MAC5D1B,mBAAmB,CAAC,mBAAmB,CAAC;IAC1C;EACF,CAAC;EAED,MAAM0C,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC3B,SAAS,CAAC4B,OAAO,EAAE;;IAExB;IACA,MAAMC,KAAK,GAAG,IAAI1D,KAAK,CAAC2D,KAAK,CAAC,CAAC;IAC/BD,KAAK,CAACE,UAAU,GAAG,IAAI5D,KAAK,CAAC6D,KAAK,CAAC,QAAQ,CAAC;IAC5C/B,QAAQ,CAAC2B,OAAO,GAAGC,KAAK;;IAExB;IACA,MAAMI,MAAM,GAAG,IAAI9D,KAAK,CAAC+D,iBAAiB,CACxC,EAAE,EACFlC,SAAS,CAAC4B,OAAO,CAACO,WAAW,GAAGnC,SAAS,CAAC4B,OAAO,CAACQ,YAAY,EAC9D,GAAG,EACH,IACF,CAAC;IACDH,MAAM,CAACI,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BpC,SAAS,CAAC0B,OAAO,GAAGK,MAAM;;IAE1B;IACA,MAAMM,QAAQ,GAAG,IAAIpE,KAAK,CAACqE,aAAa,CAAC;MACvCC,MAAM,EAAEzC,SAAS,CAAC4B,OAAO;MACzBc,SAAS,EAAE;IACb,CAAC,CAAC;IACFH,QAAQ,CAACI,OAAO,CAAC3C,SAAS,CAAC4B,OAAO,CAACO,WAAW,EAAEnC,SAAS,CAAC4B,OAAO,CAACQ,YAAY,CAAC;IAC/EG,QAAQ,CAACK,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;IAC/C3C,WAAW,CAACyB,OAAO,GAAGW,QAAQ;;IAE9B;IACA,MAAMQ,QAAQ,GAAG,IAAI3E,aAAa,CAAC6D,MAAM,EAAEM,QAAQ,CAACS,UAAU,CAAC;IAC/DD,QAAQ,CAACE,aAAa,GAAG,IAAI;IAC7BF,QAAQ,CAACG,aAAa,GAAG,IAAI;IAC7BH,QAAQ,CAACI,kBAAkB,GAAG,KAAK;IACnCJ,QAAQ,CAACK,WAAW,GAAG,GAAG;IAC1BL,QAAQ,CAACM,WAAW,GAAG,GAAG;IAC1BjD,WAAW,CAACwB,OAAO,GAAGmB,QAAQ;;IAE9B;IACA,MAAMO,YAAY,GAAG,IAAInF,KAAK,CAACoF,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC1D1B,KAAK,CAAC2B,GAAG,CAACF,YAAY,CAAC;IAEvB,MAAMG,gBAAgB,GAAG,IAAItF,KAAK,CAACuF,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC;IAClED,gBAAgB,CAACpB,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACtCT,KAAK,CAAC2B,GAAG,CAACC,gBAAgB,CAAC;;IAE3B;IACA,MAAME,UAAU,GAAG,IAAIxF,KAAK,CAACyF,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC;IAC/C/B,KAAK,CAAC2B,GAAG,CAACG,UAAU,CAAC;;IAErB;IACA,MAAME,UAAU,GAAG,IAAI1F,KAAK,CAAC2F,UAAU,CAAC,CAAC,CAAC;IAC1CjC,KAAK,CAAC2B,GAAG,CAACK,UAAU,CAAC;IAErBnD,UAAU,CAAC,sBAAsB,CAAC;EACpC,CAAC;EAED,MAAMqD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACnE,kBAAkB,CAACgC,OAAO,IAAI,CAAChD,aAAa,EAAE;IAEnD,IAAI;MACF,MAAMoF,QAAQ,GAAGpF,aAAa,CAACqF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MACpDvD,UAAU,CAAC,yCAAyCsD,QAAQ,EAAE,CAAC;MAC/D,MAAME,IAAI,GAAG,MAAM7F,qBAAqB,CAAC8F,iBAAiB,CAACH,QAAQ,CAAC;MAEpEtD,UAAU,CAAC,kBAAkB0D,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC;MACzE5D,UAAU,CAAC,cAAc,OAAOwD,IAAI,oBAAoB,OAAOA,IAAI,CAACK,QAAQ,EAAE,CAAC;MAE/E,IAAI,CAACL,IAAI,CAACK,QAAQ,IAAIL,IAAI,CAACK,QAAQ,CAACpD,MAAM,KAAK,CAAC,EAAE;QAChDT,UAAU,CAAC,wBAAwB,CAAC;QACpCrB,mBAAmB,CAAC,SAAS,CAAC;QAC9B;MACF;MAEAqB,UAAU,CAAC,0BAA0BwD,IAAI,CAACK,QAAQ,CAACpD,MAAM,EAAE,CAAC;;MAE5D;MACA,IAAIqD,WAAW;MACf,IAAIC,KAAK,CAACC,OAAO,CAACR,IAAI,CAACK,QAAQ,CAAC,EAAE;QAChC;QACAC,WAAW,GAAGN,IAAI,CAACK,QAAQ;MAC7B,CAAC,MAAM,IAAI,OAAOL,IAAI,CAACK,QAAQ,KAAK,QAAQ,EAAE;QAC5C;QACA7D,UAAU,CAAC,oDAAoD,CAAC;QAChE;MACF,CAAC,MAAM;QACLA,UAAU,CAAC,+CAA+C,CAAC;QAC3D;MACF;;MAEA;MACA,MAAMiE,YAAY,GAAG,EAAE;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACrD,MAAM,EAAEyD,CAAC,EAAE,EAAE;QAC3C,MAAMC,MAAM,GAAGL,WAAW,CAACI,CAAC,CAAC;QAC7B,IAAIH,KAAK,CAACC,OAAO,CAACG,MAAM,CAAC,IAAIA,MAAM,CAAC1D,MAAM,KAAK,CAAC,EAAE;UAChD,MAAM,CAAC2D,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,MAAM;UACxB,IAAI,CAACI,KAAK,CAACH,CAAC,CAAC,IAAI,CAACG,KAAK,CAACF,CAAC,CAAC,IAAI,CAACE,KAAK,CAACD,CAAC,CAAC,IACnCE,QAAQ,CAACJ,CAAC,CAAC,IAAII,QAAQ,CAACH,CAAC,CAAC,IAAIG,QAAQ,CAACF,CAAC,CAAC,EAAE;YAC7CL,YAAY,CAACQ,IAAI,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;UAC5B;QACF;MACF;MAEA,IAAIL,YAAY,CAACxD,MAAM,KAAK,CAAC,EAAE;QAC7BT,UAAU,CAAC,yCAAyC,CAAC;QACrD;MACF;MAEA,MAAM6D,QAAQ,GAAG,IAAIa,YAAY,CAACT,YAAY,CAAC;MAC/CjE,UAAU,CAAC,mBAAmBiE,YAAY,CAACxD,MAAM,GAAG,CAAC,mBAAmBqD,WAAW,CAACrD,MAAM,iBAAiB,CAAC;;MAE5G;MACA,IAAIwD,YAAY,CAACxD,MAAM,GAAG,CAAC,EAAE;QAC3BT,UAAU,CAAC,kBAAkBiE,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;QACxF,IAAIA,YAAY,CAACxD,MAAM,IAAI,CAAC,EAAE;UAC5BT,UAAU,CAAC,mBAAmBiE,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;QAC3F;MACF;MAEApF,cAAc,CAACgF,QAAQ,CAACpD,MAAM,GAAG,CAAC,CAAC;;MAEnC;MACA,MAAMkE,qBAAqB,GAAGnF,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACiD,KAAK,CAAC,CAAC;MAChE,MAAMC,aAAa,GAAGnF,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAACF,KAAK,CAAC,CAAC;;MAExD;MACA,IAAIjF,aAAa,CAACuB,OAAO,EAAE;QACzB3B,QAAQ,CAAC2B,OAAO,CAAC6D,MAAM,CAACpF,aAAa,CAACuB,OAAO,CAAC;QAC9CvB,aAAa,CAACuB,OAAO,CAAC8D,QAAQ,CAACC,OAAO,CAAC,CAAC;QACxCtF,aAAa,CAACuB,OAAO,CAACgE,QAAQ,CAACD,OAAO,CAAC,CAAC;MAC1C;;MAEA;MACA,MAAMD,QAAQ,GAAG,IAAIvH,KAAK,CAAC0H,cAAc,CAAC,CAAC;MAC3CH,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAI3H,KAAK,CAAC4H,eAAe,CAACxB,QAAQ,EAAE,CAAC,CAAC,CAAC;MACzE7D,UAAU,CAAC,yBAAyBgF,QAAQ,CAACM,UAAU,CAAC3D,QAAQ,CAAC4D,KAAK,WAAW,CAAC;;MAElF;MACA,MAAML,QAAQ,GAAG,IAAIzH,KAAK,CAAC+H,cAAc,CAAC;QACxCC,IAAI,EAAE,IAAI;QAAE;QACZC,KAAK,EAAE,QAAQ;QACfC,WAAW,EAAE,IAAI;QACjBC,OAAO,EAAE,GAAG;QAAE;QACdC,eAAe,EAAE;MACnB,CAAC,CAAC;MACF7F,UAAU,CAAC,8BAA8B,CAAC;;MAE1C;MACA,MAAM8F,UAAU,GAAG,IAAIrI,KAAK,CAACsI,MAAM,CAACf,QAAQ,EAAEE,QAAQ,CAAC;MACvD3F,QAAQ,CAAC2B,OAAO,CAAC4B,GAAG,CAACgD,UAAU,CAAC;MAChCnG,aAAa,CAACuB,OAAO,GAAG4E,UAAU;MAClC9F,UAAU,CAAC,qDAAqDT,QAAQ,CAAC2B,OAAO,CAAC8E,QAAQ,CAACvF,MAAM,EAAE,CAAC;;MAEnG;MACA,IAAI,CAACV,uBAAuB,CAACmB,OAAO,EAAE;QACpC;QACA1B,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvClC,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAAClD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvC7B,uBAAuB,CAACmB,OAAO,GAAG,IAAI;QACtClB,UAAU,CAAC,mCAAmCR,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACyC,CAAC,KAAK5E,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAAC0C,CAAC,KAAK7E,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAAC2C,CAAC,EAAE,CAAC;MACjJ,CAAC,MAAM;QACL;QACA9E,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACsE,IAAI,CAACtB,qBAAqB,CAAC;QACtDjF,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAACmB,IAAI,CAACpB,aAAa,CAAC;QAC9C7E,UAAU,CAAC,iCAAiCR,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACyC,CAAC,KAAK5E,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAAC0C,CAAC,KAAK7E,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAAC2C,CAAC,EAAE,CAAC;MAC/I;MAEA3F,mBAAmB,CAAC,WAAW,CAAC;MAChCqB,UAAU,CAAC,4BAA4B6D,QAAQ,CAACpD,MAAM,GAAG,CAAC,WAAW,CAAC;IAExE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdd,UAAU,CAAC,+BAA+Bc,KAAK,CAACb,OAAO,EAAE,CAAC;MAC1DtB,mBAAmB,CAAC,OAAO,CAAC;IAC9B;EACF,CAAC;EAED,MAAMuH,OAAO,GAAIC,WAAW,IAAK;IAC/B,IAAI,CAACjH,kBAAkB,CAACgC,OAAO,EAAE;IAEjCtB,cAAc,CAACsB,OAAO,GAAGkF,qBAAqB,CAACF,OAAO,CAAC;;IAEvD;IACArG,aAAa,CAACqB,OAAO,EAAE;IACvB,IAAIiF,WAAW,GAAGrG,WAAW,CAACoB,OAAO,IAAI,IAAI,EAAE;MAC7CnC,MAAM,CAACc,aAAa,CAACqB,OAAO,CAAC;MAC7BrB,aAAa,CAACqB,OAAO,GAAG,CAAC;MACzBpB,WAAW,CAACoB,OAAO,GAAGiF,WAAW;IACnC;;IAEA;IACA,IAAIzG,WAAW,CAACwB,OAAO,EAAE;MACvBxB,WAAW,CAACwB,OAAO,CAACmF,MAAM,CAAC,CAAC;IAC9B;;IAEA;IACA,IAAI5G,WAAW,CAACyB,OAAO,IAAI3B,QAAQ,CAAC2B,OAAO,IAAI1B,SAAS,CAAC0B,OAAO,EAAE;MAChEzB,WAAW,CAACyB,OAAO,CAACoF,MAAM,CAAC/G,QAAQ,CAAC2B,OAAO,EAAE1B,SAAS,CAAC0B,OAAO,CAAC;MAC/D;MACA,IAAIrB,aAAa,CAACqB,OAAO,GAAG,EAAE,KAAK,CAAC,EAAE;QACpClB,UAAU,CAAC,oCAAoCT,QAAQ,CAAC2B,OAAO,CAAC8E,QAAQ,CAACvF,MAAM,kBAAkBd,aAAa,CAACuB,OAAO,GAAG,SAAS,GAAG,SAAS,EAAE,CAAC;MACnJ;IACF;EACF,CAAC;EAED,MAAMqF,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAACrI,aAAa,EAAE;MAClBsI,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEA,IAAI;MACF,MAAMlD,QAAQ,GAAGpF,aAAa,CAACqF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;;MAEpD;MACA,IAAI,CAAChE,QAAQ,CAAC2B,OAAO,EAAE;QACrBD,WAAW,CAAC,CAAC;MACf;;MAEA;MACA,IAAItB,aAAa,CAACuB,OAAO,EAAE;QACzB3B,QAAQ,CAAC2B,OAAO,CAAC6D,MAAM,CAACpF,aAAa,CAACuB,OAAO,CAAC;QAC9CvB,aAAa,CAACuB,OAAO,CAAC8D,QAAQ,CAACC,OAAO,CAAC,CAAC;QACxCtF,aAAa,CAACuB,OAAO,CAACgE,QAAQ,CAACD,OAAO,CAAC,CAAC;QACxCtF,aAAa,CAACuB,OAAO,GAAG,IAAI;MAC9B;MAEA7C,kBAAkB,CAAC,IAAI,CAAC;MACxBa,kBAAkB,CAACgC,OAAO,GAAG,IAAI;MACjC3C,mBAAmB,CAAC,WAAW,CAAC;MAChCI,mBAAmB,CAAC,eAAe,CAAC;MACpCqB,UAAU,CAAC,mCAAmC,CAAC;;MAE/C;MACA,IAAI;QACFA,UAAU,CAAC,yCAAyC,CAAC;QACrD,MAAMyG,YAAY,GAAG,MAAM9I,qBAAqB,CAAC+I,aAAa,CAACxI,aAAa,EAAEoF,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;QAClG7E,YAAY,CAACgI,YAAY,CAAC;QAC1BzG,UAAU,CAAC,iCAAiCyG,YAAY,EAAE,CAAC;;QAE3D;QACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;QAEvD;QACA5G,UAAU,CAAC,sCAAsC,CAAC;QAClD,MAAMrC,qBAAqB,CAACmJ,kBAAkB,CAACxD,QAAQ,EAAE,IAAI,CAAC;QAC9DtD,UAAU,CAAC,kCAAkC,CAAC;;QAE9C;QACA+G,sBAAsB,CAACN,YAAY,CAAC;MAEtC,CAAC,CAAC,OAAO3F,KAAK,EAAE;QACdd,UAAU,CAAC,YAAYc,KAAK,CAACb,OAAO,EAAE,CAAC;MACzC;;MAEA;MACAiG,OAAO,CAAC,CAAC,CAAC;;MAEV;MACA/G,iBAAiB,CAAC+B,OAAO,GAAG8F,WAAW,CAAC,MAAM;QAC5C,IAAI9H,kBAAkB,CAACgC,OAAO,EAAE;UAC9BmC,gBAAgB,CAAC,CAAC;QACpB,CAAC,MAAM;UACL4D,aAAa,CAAC9H,iBAAiB,CAAC+B,OAAO,CAAC;QAC1C;MACF,CAAC,EAAE,IAAI,CAAC;MAERlB,UAAU,CAAC,4CAA4C,CAAC;IAE1D,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdd,UAAU,CAAC,8BAA8Bc,KAAK,CAACb,OAAO,EAAE,CAAC;MACzD1B,mBAAmB,CAAC,OAAO,CAAC;MAC5BI,mBAAmB,CAAC,OAAO,CAAC;IAC9B;EACF,CAAC;EAED,MAAMoI,sBAAsB,GAAIvI,SAAS,IAAK;IAC5C,IAAI;MACF;MACA,MAAM0I,cAAc,GAAGvJ,qBAAqB,CAACwJ,iBAAiB,CAAC3I,SAAS,CAAC;MAEzE,IAAI,CAAC0I,cAAc,EAAE;QACnBlH,UAAU,CAAC,iDAAiD,CAAC;QAC7D;MACF;;MAEA;MACA,MAAMoH,WAAW,GAAGF,cAAc,CAACG,iBAAiB,CAAC,iBAAiB,CAAC;MAEvED,WAAW,CAACE,MAAM,GAAG,MAAM;QACzBtH,UAAU,CAAC,oDAAoD,CAAC;MAClE,CAAC;MAEDoH,WAAW,CAACG,SAAS,GAAIC,KAAK,IAAK;QACjC,IAAI;UACF,MAAMhE,IAAI,GAAGE,IAAI,CAAC+D,KAAK,CAACD,KAAK,CAAChE,IAAI,CAAC;UAEnC,IAAIA,IAAI,CAACkE,IAAI,KAAK,iBAAiB,IAAIlE,IAAI,CAACK,QAAQ,EAAE;YACpD7D,UAAU,CAAC,iCAAiCwD,IAAI,CAACK,QAAQ,CAACpD,MAAM,WAAW,CAAC;;YAE5E;YACAkH,wBAAwB,CAACnE,IAAI,CAACK,QAAQ,CAAC;UACzC;QACF,CAAC,CAAC,OAAO/C,KAAK,EAAE;UACdd,UAAU,CAAC,qCAAqCc,KAAK,CAACb,OAAO,EAAE,CAAC;QAClE;MACF,CAAC;MAEDmH,WAAW,CAACQ,OAAO,GAAG,MAAM;QAC1B5H,UAAU,CAAC,+BAA+B,CAAC;MAC7C,CAAC;MAEDoH,WAAW,CAACS,OAAO,GAAI/G,KAAK,IAAK;QAC/Bd,UAAU,CAAC,gCAAgCc,KAAK,CAACb,OAAO,EAAE,CAAC;MAC7D,CAAC;MAEDD,UAAU,CAAC,sCAAsC,CAAC;IAEpD,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdd,UAAU,CAAC,2CAA2Cc,KAAK,CAACb,OAAO,EAAE,CAAC;IACxE;EACF,CAAC;EAED,MAAM0H,wBAAwB,GAAI9D,QAAQ,IAAK;IAC7C,IAAI;MACF,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACpD,MAAM,KAAK,CAAC,EAAE;QACtCT,UAAU,CAAC,2BAA2B,CAAC;QACvC;MACF;;MAEA;MACA,MAAMiE,YAAY,GAAG,EAAE;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACpD,MAAM,EAAEyD,CAAC,EAAE,EAAE;QACxC,MAAMC,MAAM,GAAGN,QAAQ,CAACK,CAAC,CAAC;QAC1B,IAAIH,KAAK,CAACC,OAAO,CAACG,MAAM,CAAC,IAAIA,MAAM,CAAC1D,MAAM,KAAK,CAAC,EAAE;UAChD,MAAM,CAAC2D,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,MAAM;UACxB,IAAI,CAACI,KAAK,CAACH,CAAC,CAAC,IAAI,CAACG,KAAK,CAACF,CAAC,CAAC,IAAI,CAACE,KAAK,CAACD,CAAC,CAAC,IACnCE,QAAQ,CAACJ,CAAC,CAAC,IAAII,QAAQ,CAACH,CAAC,CAAC,IAAIG,QAAQ,CAACF,CAAC,CAAC,EAAE;YAC7CL,YAAY,CAACQ,IAAI,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;UAC5B;QACF;MACF;MAEA,IAAIL,YAAY,CAACxD,MAAM,KAAK,CAAC,EAAE;QAC7BT,UAAU,CAAC,yCAAyC,CAAC;QACrD;MACF;MAEA,MAAM8D,WAAW,GAAG,IAAIY,YAAY,CAACT,YAAY,CAAC;MAClDjE,UAAU,CAAC,mBAAmBiE,YAAY,CAACxD,MAAM,GAAG,CAAC,mBAAmBoD,QAAQ,CAACpD,MAAM,iBAAiB,CAAC;MAEzG5B,cAAc,CAACiF,WAAW,CAACrD,MAAM,GAAG,CAAC,CAAC;;MAEtC;MACA,MAAMkE,qBAAqB,GAAGnF,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACiD,KAAK,CAAC,CAAC;MAChE,MAAMC,aAAa,GAAGnF,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAACF,KAAK,CAAC,CAAC;;MAExD;MACA,IAAIjF,aAAa,CAACuB,OAAO,EAAE;QACzB3B,QAAQ,CAAC2B,OAAO,CAAC6D,MAAM,CAACpF,aAAa,CAACuB,OAAO,CAAC;QAC9CvB,aAAa,CAACuB,OAAO,CAAC8D,QAAQ,CAACC,OAAO,CAAC,CAAC;QACxCtF,aAAa,CAACuB,OAAO,CAACgE,QAAQ,CAACD,OAAO,CAAC,CAAC;MAC1C;;MAEA;MACA,MAAMD,QAAQ,GAAG,IAAIvH,KAAK,CAAC0H,cAAc,CAAC,CAAC;MAC3CH,QAAQ,CAACI,YAAY,CAAC,UAAU,EAAE,IAAI3H,KAAK,CAAC4H,eAAe,CAACvB,WAAW,EAAE,CAAC,CAAC,CAAC;MAC5E9D,UAAU,CAAC,yBAAyBgF,QAAQ,CAACM,UAAU,CAAC3D,QAAQ,CAAC4D,KAAK,WAAW,CAAC;;MAElF;MACA,MAAML,QAAQ,GAAG,IAAIzH,KAAK,CAAC+H,cAAc,CAAC;QACxCC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,QAAQ;QACfC,WAAW,EAAE,IAAI;QACjBC,OAAO,EAAE,GAAG;QACZC,eAAe,EAAE;MACnB,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,GAAG,IAAIrI,KAAK,CAACsI,MAAM,CAACf,QAAQ,EAAEE,QAAQ,CAAC;MACvD3F,QAAQ,CAAC2B,OAAO,CAAC4B,GAAG,CAACgD,UAAU,CAAC;MAChCnG,aAAa,CAACuB,OAAO,GAAG4E,UAAU;MAClC9F,UAAU,CAAC,qDAAqDT,QAAQ,CAAC2B,OAAO,CAAC8E,QAAQ,CAACvF,MAAM,EAAE,CAAC;;MAEnG;MACA,IAAI,CAACV,uBAAuB,CAACmB,OAAO,EAAE;QACpC1B,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvClC,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAAClD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvC7B,uBAAuB,CAACmB,OAAO,GAAG,IAAI;MACxC,CAAC,MAAM;QACL1B,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACsE,IAAI,CAACtB,qBAAqB,CAAC;QACtDjF,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAACmB,IAAI,CAACpB,aAAa,CAAC;MAChD;MAEAlG,mBAAmB,CAAC,WAAW,CAAC;MAChCqB,UAAU,CAAC,4BAA4B8D,WAAW,CAACrD,MAAM,GAAG,CAAC,WAAW,CAAC;IAE3E,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdd,UAAU,CAAC,yCAAyCc,KAAK,CAACb,OAAO,EAAE,CAAC;MACpEtB,mBAAmB,CAAC,OAAO,CAAC;IAC9B;EACF,CAAC;EAED,MAAMmJ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAAC5J,aAAa,EAAE;MAClBsI,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEA,IAAI;MACF,MAAMlD,QAAQ,GAAGpF,aAAa,CAACqF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;MACpDvD,UAAU,CAAC,qBAAqB,CAAC;;MAEjC;MACA,IAAIxB,SAAS,EAAE;QACb,IAAI;UACF,MAAMb,qBAAqB,CAACoK,YAAY,CAACvJ,SAAS,CAAC;UACnDwB,UAAU,CAAC,uBAAuB,CAAC;QACrC,CAAC,CAAC,OAAOc,KAAK,EAAE;UACdd,UAAU,CAAC,YAAYc,KAAK,CAACb,OAAO,EAAE,CAAC;QACzC;MACF;;MAEA;MACA,IAAI;QACF,MAAMtC,qBAAqB,CAACmJ,kBAAkB,CAACxD,QAAQ,EAAE,KAAK,CAAC;QAC/DtD,UAAU,CAAC,oCAAoC,CAAC;MAClD,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdd,UAAU,CAAC,YAAYc,KAAK,CAACb,OAAO,EAAE,CAAC;MACzC;;MAEA;MACA,MAAM,IAAI0G,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD5G,UAAU,CAAC,mDAAmD,CAAC;IACjE,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdd,UAAU,CAAC,2BAA2Bc,KAAK,CAACb,OAAO,EAAE,CAAC;IACxD;EACF,CAAC;EAED,MAAM+H,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC3J,kBAAkB,CAAC,KAAK,CAAC;IACzBa,kBAAkB,CAACgC,OAAO,GAAG,KAAK;IAClC3C,mBAAmB,CAAC,cAAc,CAAC;IACnCI,mBAAmB,CAAC,SAAS,CAAC;IAC9BE,cAAc,CAAC,CAAC,CAAC;IACjBE,MAAM,CAAC,CAAC,CAAC;IAET,IAAIa,cAAc,CAACsB,OAAO,EAAE;MAC1B+G,oBAAoB,CAACrI,cAAc,CAACsB,OAAO,CAAC;MAC5CtB,cAAc,CAACsB,OAAO,GAAG,IAAI;IAC/B;;IAEA;IACA,IAAI/B,iBAAiB,CAAC+B,OAAO,EAAE;MAC7B+F,aAAa,CAAC9H,iBAAiB,CAAC+B,OAAO,CAAC;MACxC/B,iBAAiB,CAAC+B,OAAO,GAAG,IAAI;IAClC;;IAEA;IACA,IAAIvB,aAAa,CAACuB,OAAO,EAAE;MACzB3B,QAAQ,CAAC2B,OAAO,CAAC6D,MAAM,CAACpF,aAAa,CAACuB,OAAO,CAAC;MAC9CvB,aAAa,CAACuB,OAAO,CAAC8D,QAAQ,CAACC,OAAO,CAAC,CAAC;MACxCtF,aAAa,CAACuB,OAAO,CAACgE,QAAQ,CAACD,OAAO,CAAC,CAAC;MACxCtF,aAAa,CAACuB,OAAO,GAAG,IAAI;IAC9B;;IAEA;IACAnB,uBAAuB,CAACmB,OAAO,GAAG,KAAK;;IAEvC;IACA,IAAI1C,SAAS,EAAE;MACb,IAAI;QACFwB,UAAU,CAAC,+BAA+B,CAAC;QAC3C,MAAMrC,qBAAqB,CAACoK,YAAY,CAACvJ,SAAS,CAAC;QACnDwB,UAAU,CAAC,2BAA2B,CAAC;;QAEvC;QACAA,UAAU,CAAC,wCAAwC,CAAC;QACpD,MAAMsD,QAAQ,GAAGpF,aAAa,CAACqF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;QACpD,MAAM5F,qBAAqB,CAACmJ,kBAAkB,CAACxD,QAAQ,EAAE,KAAK,CAAC;QAC/DtD,UAAU,CAAC,oCAAoC,CAAC;;QAEhD;QACA,MAAM,IAAI2G,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAExD,CAAC,CAAC,OAAO9F,KAAK,EAAE;QACdd,UAAU,CAAC,+CAA+Cc,KAAK,CAACb,OAAO,EAAE,CAAC;MAC5E;IACF;;IAEA;IACAxB,YAAY,CAAC,IAAI,CAAC;IAElBuB,UAAU,CAAC,+BAA+B,CAAC;EAC7C,CAAC;EAID,MAAMkI,cAAc,GAAG1K,WAAW,CAAEgK,KAAK,IAAK;IAC5C,IAAIA,KAAK,CAACW,GAAG,KAAK,GAAG,IAAIX,KAAK,CAACW,GAAG,KAAK,GAAG,EAAE;MAC1C;MACA,IAAI3I,SAAS,CAAC0B,OAAO,IAAIxB,WAAW,CAACwB,OAAO,EAAE;QAC5C1B,SAAS,CAAC0B,OAAO,CAACS,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvClC,WAAW,CAACwB,OAAO,CAAC4D,MAAM,CAAClD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvC7B,uBAAuB,CAACmB,OAAO,GAAG,IAAI;QACtClB,UAAU,CAAC,kCAAkC,CAAC;MAChD;IACF;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB1C,SAAS,CAAC,MAAM;IACd;IACA2D,WAAW,CAAC,CAAC;;IAEb;IACAF,cAAc,CAAC,CAAC;IAChBoB,MAAM,CAACiG,gBAAgB,CAAC,SAAS,EAAEF,cAAc,CAAC;IAElD,OAAO,MAAM;MACX/F,MAAM,CAACkG,mBAAmB,CAAC,SAAS,EAAEH,cAAc,CAAC;MACrD,IAAItI,cAAc,CAACsB,OAAO,EAAE;QAC1B+G,oBAAoB,CAACrI,cAAc,CAACsB,OAAO,CAAC;MAC9C;MACA,IAAI/B,iBAAiB,CAAC+B,OAAO,EAAE;QAC7B+F,aAAa,CAAC9H,iBAAiB,CAAC+B,OAAO,CAAC;MAC1C;;MAEA;MACA,IAAIhD,aAAa,EAAE;QACjB,MAAMoF,QAAQ,GAAGpF,aAAa,CAACqF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;QACpD;QACA,IAAI;UACF5F,qBAAqB,CAAC2K,gBAAgB,CAAChF,QAAQ,CAAC;UAChD3F,qBAAqB,CAACmJ,kBAAkB,CAACxD,QAAQ,EAAE,KAAK,CAAC;QAC3D,CAAC,CAAC,OAAOxC,KAAK,EAAE;UACd;QAAA;MAEJ;MAEAnD,qBAAqB,CAAC4K,UAAU,CAAC,CAAC;IACpC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENjL,SAAS,CAAC,MAAM;IACd,MAAMkL,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIlJ,SAAS,CAAC4B,OAAO,IAAI1B,SAAS,CAAC0B,OAAO,IAAIzB,WAAW,CAACyB,OAAO,EAAE;QACjE,MAAMuH,KAAK,GAAGnJ,SAAS,CAAC4B,OAAO,CAACO,WAAW;QAC3C,MAAMiH,MAAM,GAAGpJ,SAAS,CAAC4B,OAAO,CAACQ,YAAY;QAE7ClC,SAAS,CAAC0B,OAAO,CAACyH,MAAM,GAAGF,KAAK,GAAGC,MAAM;QACzClJ,SAAS,CAAC0B,OAAO,CAAC0H,sBAAsB,CAAC,CAAC;QAC1CnJ,WAAW,CAACyB,OAAO,CAACe,OAAO,CAACwG,KAAK,EAAEC,MAAM,CAAC;MAC5C;IACF,CAAC;IAEDvG,MAAM,CAACiG,gBAAgB,CAAC,QAAQ,EAAEI,YAAY,CAAC;IAC/C,OAAO,MAAMrG,MAAM,CAACkG,mBAAmB,CAAC,QAAQ,EAAEG,YAAY,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3K,OAAA;IAAAmI,QAAA,gBACEnI,OAAA;MAAKgL,SAAS,EAAC,WAAW;MAAA7C,QAAA,gBACxBnI,OAAA;QAAAmI,QAAA,EAAI;MAAkC;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3CpL,OAAA;QAAAmI,QAAA,EAAG;MAAoD;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAE3DpL,OAAA;QAAKgL,SAAS,EAAC,YAAY;QAAA7C,QAAA,gBACzBnI,OAAA;UAAOqL,OAAO,EAAC,aAAa;UAAAlD,QAAA,EAAC;QAAa;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClDpL,OAAA;UACEsL,EAAE,EAAC,aAAa;UAChBC,KAAK,EAAElL,aAAc;UACrBmL,QAAQ,EAAGC,CAAC,IAAKnL,gBAAgB,CAACmL,CAAC,CAACxE,MAAM,CAACsE,KAAK,CAAE;UAClDG,QAAQ,EAAE,CAACvK,WAAY;UAAAgH,QAAA,gBAEvBnI,OAAA;YAAQuL,KAAK,EAAC,EAAE;YAAApD,QAAA,EAAC;UAAiB;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC1CjL,MAAM,CAAC0C,GAAG,CAAE8I,KAAK;YAAA,IAAAC,iBAAA;YAAA,oBAChB5L,OAAA;cAA4BuL,KAAK,EAAEI,KAAK,CAAC5I,OAAQ;cAAAoF,QAAA,GAC9CwD,KAAK,CAAC5I,OAAO,EAAC,KAAG,EAAC,EAAA6I,iBAAA,GAAAD,KAAK,CAACE,UAAU,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,IAAI,KAAI,gBAAgB;YAAA,GADlDH,KAAK,CAAC5I,OAAO;cAAAkI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAElB,CAAC;UAAA,CACV,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENpL,OAAA;QAAAmI,QAAA,gBACEnI,OAAA;UAAQ+L,OAAO,EAAEtJ,cAAe;UAACuI,SAAS,EAAC,QAAQ;UAACU,QAAQ,EAAE,CAACvK,WAAY;UAAAgH,QAAA,EAAC;QAE5E;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTpL,OAAA;UACE+L,OAAO,EAAErD,qBAAsB;UAC/BsC,SAAS,EAAC,gBAAgB;UAC1BU,QAAQ,EAAEnL,eAAe,IAAI,CAACF,aAAc;UAAA8H,QAAA,EAC7C;QAED;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTpL,OAAA;UACE+L,OAAO,EAAE5B,oBAAqB;UAC9Ba,SAAS,EAAC,eAAe;UACzBU,QAAQ,EAAE,CAACnL,eAAgB;UAAA4H,QAAA,EAC5B;QAED;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTpL,OAAA;UACE+L,OAAO,EAAE9B,WAAY;UACrBe,SAAS,EAAC,gBAAgB;UAC1BU,QAAQ,EAAE,CAACrL,aAAc;UAAA8H,QAAA,EAC1B;QAED;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAENpL,OAAA;QAAKgL,SAAS,EAAC,aAAa;QAAA7C,QAAA,eAC1BnI,OAAA;UAAKgM,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE,eAAe;YAAEC,UAAU,EAAE;UAAS,CAAE;UAAAhE,QAAA,gBACrFnI,OAAA;YAAAmI,QAAA,gBAAMnI,OAAA;cAAAmI,QAAA,EAAQ;YAAiB;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACjK,WAAW,GAAG,WAAW,GAAG,cAAc;UAAA;YAAA8J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5FpL,OAAA;YAAAmI,QAAA,gBAAMnI,OAAA;cAAAmI,QAAA,EAAQ;YAAY;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACvK,gBAAgB;UAAA;YAAAoK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7DpL,OAAA;YAAAmI,QAAA,gBAAMnI,OAAA;cAAAmI,QAAA,EAAQ;YAAS;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACrK,WAAW,CAACqL,cAAc,CAAC,CAAC;UAAA;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtEpL,OAAA;YAAAmI,QAAA,gBAAMnI,OAAA;cAAAmI,QAAA,EAAQ;YAAI;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACnK,GAAG;UAAA;YAAAgK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNpL,OAAA;QAAKgL,SAAS,EAAE,UAAU7J,WAAW,GAAG,SAAS,GAAG,OAAO,EAAG;QAAAgH,QAAA,GAAC,uCAClC,EAAChH,WAAW,GAAG,WAAW,GAAG,cAAc;MAAA;QAAA8J,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpL,OAAA;MAAKgL,SAAS,EAAC,WAAW;MAAA7C,QAAA,gBACxBnI,OAAA;QAAAmI,QAAA,EAAI;MAAqB;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BpL,OAAA;QAAKgL,SAAS,EAAC,gBAAgB;QAAA7C,QAAA,gBAC7BnI,OAAA;UAAAmI,QAAA,EAAI;QAAe;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxBpL,OAAA;UAAAmI,QAAA,gBACEnI,OAAA;YAAAmI,QAAA,gBAAInI,OAAA;cAAAmI,QAAA,EAAQ;YAAkB;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,gCAA4B;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxEpL,OAAA;YAAAmI,QAAA,gBAAInI,OAAA;cAAAmI,QAAA,EAAQ;YAAmB;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAAW;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxDpL,OAAA;YAAAmI,QAAA,gBAAInI,OAAA;cAAAmI,QAAA,EAAQ;YAAa;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,gBAAY;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnDpL,OAAA;YAAAmI,QAAA,gBAAInI,OAAA;cAAAmI,QAAA,EAAQ;YAAM;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,qCAAiC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpL,OAAA;MAAKgL,SAAS,EAAC,WAAW;MAAA7C,QAAA,gBACxBnI,OAAA;QAAAmI,QAAA,EAAI;MAAwB;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjCpL,OAAA;QAAKgM,KAAK,EAAE;UACVxI,UAAU,EAAE,oBAAoB;UAChC6I,YAAY,EAAE,MAAM;UACpBC,OAAO,EAAE,MAAM;UACfzB,MAAM,EAAE,OAAO;UACf/G,QAAQ,EAAE,UAAU;UACpByI,QAAQ,EAAE;QACZ,CAAE;QAAApE,QAAA,gBACAnI,OAAA;UACEwM,GAAG,EAAE/K,SAAU;UACfuK,KAAK,EAAE;YACLpB,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,MAAM;YACdwB,YAAY,EAAE,MAAM;YACpBJ,OAAO,EAAE;UACX;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EACD,CAAC7K,eAAe,iBACfP,OAAA;UAAKgM,KAAK,EAAE;YACVlI,QAAQ,EAAE,UAAU;YACpB2I,GAAG,EAAE,KAAK;YACVC,IAAI,EAAE,KAAK;YACXC,SAAS,EAAE,uBAAuB;YAClCC,QAAQ,EAAE,MAAM;YAChB/E,KAAK,EAAE;UACT,CAAE;UAAAM,QAAA,EAAC;QAEH;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN,EACA7K,eAAe,IAAIQ,WAAW,GAAG,CAAC,iBACjCf,OAAA;UAAKgM,KAAK,EAAE;YACVlI,QAAQ,EAAE,UAAU;YACpB2I,GAAG,EAAE,MAAM;YACXI,KAAK,EAAE,MAAM;YACbrJ,UAAU,EAAE,oBAAoB;YAChC8I,OAAO,EAAE,MAAM;YACfD,YAAY,EAAE,KAAK;YACnBO,QAAQ,EAAE,MAAM;YAChB/E,KAAK,EAAE;UACT,CAAE;UAAAM,QAAA,GAAC,UACO,EAACpH,WAAW,CAACqL,cAAc,CAAC,CAAC;QAAA;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpL,OAAA;MAAKgL,SAAS,EAAC,WAAW;MAAA7C,QAAA,gBACxBnI,OAAA;QAAAmI,QAAA,EAAI;MAAiB;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BpL,OAAA;QAAKgL,SAAS,EAAC,KAAK;QAAA7C,QAAA,EAAE5G;MAAG;QAAA0J,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClL,EAAA,CA1uBID,cAAc;AAAA6M,EAAA,GAAd7M,cAAc;AA4uBpB,eAAeA,cAAc;AAAC,IAAA6M,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}