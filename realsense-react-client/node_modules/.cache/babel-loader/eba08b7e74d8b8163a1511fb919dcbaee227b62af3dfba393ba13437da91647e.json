{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PointCloudDemo = () => {\n  _s();\n  const [apiUrl, setApiUrl] = useState('http://localhost:8000/api');\n  const [deviceId, setDeviceId] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n\n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, canvasRef.current.clientWidth / canvasRef.current.clientHeight, 0.1, 1000);\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true\n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n    logMessage('Three.js initialized');\n  };\n  const updatePointCloud = async () => {\n    if (!isViewerRunningRef.current || !deviceId) return;\n    try {\n      logMessage(`Fetching point cloud data for device: ${deviceId}`);\n      const response = await axios.get(`${apiUrl}/webrtc/pointcloud-data/${deviceId}`);\n      const data = response.data;\n      logMessage(`Received data: ${JSON.stringify(data).substring(0, 200)}...`);\n      logMessage(`Data type: ${typeof data}, vertices type: ${typeof data.vertices}`);\n      if (!data.vertices || data.vertices.length === 0) {\n        logMessage('No vertices data found');\n        setPointCloudStatus('No data');\n        return;\n      }\n      logMessage(`Vertices array length: ${data.vertices.length}`);\n\n      // Handle different data formats\n      let vertexArray;\n      if (Array.isArray(data.vertices)) {\n        // Direct array format\n        vertexArray = data.vertices;\n      } else if (typeof data.vertices === 'string') {\n        // Base64 encoded format - skip for now\n        logMessage('Received base64 encoded data, skipping this update');\n        return;\n      } else {\n        logMessage('Unknown vertices format, skipping this update');\n        return;\n      }\n\n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertexArray.length; i++) {\n        const vertex = vertexArray[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      const vertices = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertexArray.length} input vertices`);\n\n      // Debug: Show first few vertices\n      if (flatVertices.length > 0) {\n        logMessage(`First vertex: [${flatVertices[0]}, ${flatVertices[1]}, ${flatVertices[2]}]`);\n        if (flatVertices.length >= 6) {\n          logMessage(`Second vertex: [${flatVertices[3]}, ${flatVertices[4]}, ${flatVertices[5]}]`);\n        }\n      }\n      setVertexCount(vertices.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01,\n        // Smaller points\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0,\n        // Full opacity\n        sizeAttenuation: true\n      });\n      logMessage('Created point cloud material');\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        // Initial setup\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage(`Initialized camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      } else {\n        // Preserve user's view\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n        logMessage(`Preserved camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      }\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertices.length / 3} vertices`);\n    } catch (error) {\n      logMessage(`Error updating point cloud: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n  const animate = currentTime => {\n    if (!isViewerRunningRef.current) return;\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n  const startPointCloudViewer = async () => {\n    if (!deviceId) {\n      alert('Please enter a device ID');\n      return;\n    }\n    try {\n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Automatically activate point cloud processing\n      try {\n        logMessage('Activating point cloud processing...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`);\n        logMessage('Point cloud processing activated');\n\n        // Start a depth stream session to enable point cloud data\n        logMessage('Starting depth stream session...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/start`, {\n          configs: [{\n            sensor_id: `${deviceId}-sensor-0`,\n            stream_type: 'depth',\n            format: 'z16',\n            resolution: {\n              width: 640,\n              height: 480\n            },\n            framerate: 30\n          }]\n        });\n        logMessage('Depth stream session started');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n      logMessage('3D point cloud viewer started successfully');\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n  const resetDevice = async () => {\n    if (!deviceId) {\n      alert('Please enter a device ID');\n      return;\n    }\n    try {\n      logMessage('Resetting device...');\n\n      // Stop any active streams\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n        logMessage('Stopped active streams');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Deactivate point cloud processing\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, {\n          enabled: false\n        });\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up depth session if it exists\n    if (deviceId) {\n      try {\n        logMessage('Cleaning up depth session...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n        logMessage('Depth session cleaned up');\n\n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, {\n          enabled: false\n        });\n        logMessage('Point cloud processing deactivated');\n\n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        logMessage(`Warning: Failed to clean up depth session: ${error.message}`);\n      }\n    }\n    logMessage('3D point cloud viewer stopped');\n  };\n  const discoverDevices = useCallback(async () => {\n    try {\n      logMessage('Discovering devices...');\n      logMessage(`Making request to: ${apiUrl}/devices/`);\n      const response = await axios.get(`${apiUrl}/devices/`);\n      logMessage(`Response status: ${response.status}`);\n      logMessage(`Response data: ${JSON.stringify(response.data)}`);\n      const devices = response.data;\n      if (devices.length > 0) {\n        setDeviceId(devices[0].device_id);\n        logMessage(`Found ${devices.length} device(s): ${devices.map(d => d.device_id).join(', ')}`);\n      } else {\n        logMessage('No devices found');\n      }\n    } catch (error) {\n      var _error$response;\n      logMessage(`Failed to discover devices: ${error.message}`);\n      logMessage(`Error details: ${JSON.stringify(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error)}`);\n    }\n  }, [apiUrl, logMessage]);\n  const handleKeyPress = useCallback(event => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n  useEffect(() => {\n    discoverDevices();\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n\n      // Cleanup on unmount\n      if (deviceId) {\n        // Clean up any active streams\n        try {\n          axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n          axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, {\n            enabled: false\n          });\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n    };\n  }, [discoverDevices, handleKeyPress]);\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAF RealSense 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Interactive 3D visualization of RealSense depth data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"apiUrl\",\n          children: \"API URL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"apiUrl\",\n          value: apiUrl,\n          onChange: e => setApiUrl(e.target.value),\n          placeholder: \"Enter API URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"deviceId\",\n          children: \"Device ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"deviceId\",\n          value: deviceId,\n          onChange: e => setDeviceId(e.target.value),\n          placeholder: \"e.g., 844212070924\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverDevices,\n          className: \"button\",\n          children: \"\\uD83D\\uDD0D Discover Devices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startPointCloudViewer,\n          className: \"button success\",\n          disabled: isViewerRunning,\n          children: \"\\u25B6\\uFE0F Start 3D Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopPointCloudViewer,\n          className: \"button danger\",\n          disabled: !isViewerRunning,\n          children: \"\\u23F9\\uFE0F Stop Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          children: \"\\uD83D\\uDD04 Reset Device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Connection:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 19\n            }, this), \" \", connectionStatus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Point Cloud:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 19\n            }, this), \" \", pointCloudStatus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Vertices:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 19\n            }, this), \" \", vertexCount.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"FPS:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 19\n            }, this), \" \", fps]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFAE 3D Viewer Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mouse Controls:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Left Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 17\n            }, this), \" Rotate camera around target\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Right Click + Drag:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), \" Pan camera\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Scroll Wheel:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this), \" Zoom in/out\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"R Key:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this), \" Reset camera to initial position\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 3D Point Cloud Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'rgba(0, 0, 0, 0.8)',\n          borderRadius: '15px',\n          padding: '20px',\n          height: '600px',\n          position: 'relative',\n          overflow: 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            width: '100%',\n            height: '100%',\n            borderRadius: '10px',\n            display: 'block'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), !isViewerRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            fontSize: '18px',\n            color: '#ffd700'\n          },\n          children: \"Click \\\"Start 3D Viewer\\\" to begin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this), isViewerRunning && vertexCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            background: 'rgba(0, 0, 0, 0.7)',\n            padding: '10px',\n            borderRadius: '8px',\n            fontSize: '14px',\n            color: 'white'\n          },\n          children: [\"Points: \", vertexCount.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n_s(PointCloudDemo, \"R0zF1GT9R4U1LYYsFSYYi5mrSqA=\");\n_c = PointCloudDemo;\nexport default PointCloudDemo;\nvar _c;\n$RefreshReg$(_c, \"PointCloudDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","THREE","OrbitControls","axios","jsxDEV","_jsxDEV","PointCloudDemo","_s","apiUrl","setApiUrl","deviceId","setDeviceId","isViewerRunning","setIsViewerRunning","connectionStatus","setConnectionStatus","pointCloudStatus","setPointCloudStatus","vertexCount","setVertexCount","fps","setFps","isViewerRunningRef","updateIntervalRef","log","setLog","canvasRef","sceneRef","cameraRef","rendererRef","controlsRef","pointCloudRef","animationIdRef","frameCountRef","lastTimeRef","hasInitializedCameraRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","initThreeJS","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","canvas","antialias","setSize","setPixelRatio","window","devicePixelRatio","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","gridHelper","GridHelper","axesHelper","AxesHelper","updatePointCloud","response","get","data","JSON","stringify","substring","vertices","length","vertexArray","Array","isArray","flatVertices","i","vertex","x","y","z","isNaN","isFinite","push","Float32Array","currentCameraPosition","clone","currentTarget","target","remove","geometry","dispose","material","BufferGeometry","setAttribute","BufferAttribute","attributes","count","PointsMaterial","size","color","transparent","opacity","sizeAttenuation","pointCloud","Points","children","copy","error","animate","currentTime","requestAnimationFrame","update","render","startPointCloudViewer","alert","post","configs","sensor_id","stream_type","format","resolution","width","height","framerate","setInterval","clearInterval","resetDevice","enabled","Promise","resolve","setTimeout","stopPointCloudViewer","cancelAnimationFrame","discoverDevices","status","devices","device_id","map","d","join","_error$response","handleKeyPress","event","key","addEventListener","removeEventListener","handleResize","aspect","updateProjectionMatrix","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","e","placeholder","onClick","disabled","style","display","justifyContent","alignItems","toLocaleString","borderRadius","padding","overflow","ref","top","left","transform","fontSize","right","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/PointCloudDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport axios from 'axios';\n\nconst PointCloudDemo = () => {\n  const [apiUrl, setApiUrl] = useState('http://localhost:8000/api');\n  const [deviceId, setDeviceId] = useState('');\n  const [isViewerRunning, setIsViewerRunning] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('Disconnected');\n  const [pointCloudStatus, setPointCloudStatus] = useState('Stopped');\n  const [vertexCount, setVertexCount] = useState(0);\n  const [fps, setFps] = useState(0);\n  \n  // Use ref to track running state for intervals\n  const isViewerRunningRef = useRef(false);\n  const updateIntervalRef = useRef(null);\n  const [log, setLog] = useState('');\n\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const pointCloudRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(0);\n  const hasInitializedCameraRef = useRef(false);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const initThreeJS = () => {\n    if (!canvasRef.current) return;\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvasRef.current.clientWidth / canvasRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 0, 5);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      canvas: canvasRef.current,\n      antialias: true \n    });\n    renderer.setSize(canvasRef.current.clientWidth, canvasRef.current.clientHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 0.1;\n    controls.maxDistance = 100;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Axes helper\n    const axesHelper = new THREE.AxesHelper(1);\n    scene.add(axesHelper);\n\n    logMessage('Three.js initialized');\n  };\n\n  const updatePointCloud = async () => {\n    if (!isViewerRunningRef.current || !deviceId) return;\n\n    try {\n      logMessage(`Fetching point cloud data for device: ${deviceId}`);\n      const response = await axios.get(`${apiUrl}/webrtc/pointcloud-data/${deviceId}`);\n      const data = response.data;\n\n      logMessage(`Received data: ${JSON.stringify(data).substring(0, 200)}...`);\n      logMessage(`Data type: ${typeof data}, vertices type: ${typeof data.vertices}`);\n\n      if (!data.vertices || data.vertices.length === 0) {\n        logMessage('No vertices data found');\n        setPointCloudStatus('No data');\n        return;\n      }\n\n      logMessage(`Vertices array length: ${data.vertices.length}`);\n      \n      // Handle different data formats\n      let vertexArray;\n      if (Array.isArray(data.vertices)) {\n        // Direct array format\n        vertexArray = data.vertices;\n      } else if (typeof data.vertices === 'string') {\n        // Base64 encoded format - skip for now\n        logMessage('Received base64 encoded data, skipping this update');\n        return;\n      } else {\n        logMessage('Unknown vertices format, skipping this update');\n        return;\n      }\n      \n      // Flatten the array and filter out NaN values\n      const flatVertices = [];\n      for (let i = 0; i < vertexArray.length; i++) {\n        const vertex = vertexArray[i];\n        if (Array.isArray(vertex) && vertex.length === 3) {\n          const [x, y, z] = vertex;\n          if (!isNaN(x) && !isNaN(y) && !isNaN(z) && \n              isFinite(x) && isFinite(y) && isFinite(z)) {\n            flatVertices.push(x, y, z);\n          }\n        }\n      }\n      \n      if (flatVertices.length === 0) {\n        logMessage('No valid vertices found after filtering');\n        return;\n      }\n      \n      const vertices = new Float32Array(flatVertices);\n      logMessage(`Valid vertices: ${flatVertices.length / 3}, filtered from ${vertexArray.length} input vertices`);\n      \n      // Debug: Show first few vertices\n      if (flatVertices.length > 0) {\n        logMessage(`First vertex: [${flatVertices[0]}, ${flatVertices[1]}, ${flatVertices[2]}]`);\n        if (flatVertices.length >= 6) {\n          logMessage(`Second vertex: [${flatVertices[3]}, ${flatVertices[4]}, ${flatVertices[5]}]`);\n        }\n      }\n      \n      setVertexCount(vertices.length / 3);\n\n      // Store current camera state\n      const currentCameraPosition = cameraRef.current.position.clone();\n      const currentTarget = controlsRef.current.target.clone();\n\n      // Remove existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n      }\n\n      // Create new geometry\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n      logMessage(`Created geometry with ${geometry.attributes.position.count} vertices`);\n\n      // Create material\n      const material = new THREE.PointsMaterial({\n        size: 0.01, // Smaller points\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 1.0, // Full opacity\n        sizeAttenuation: true\n      });\n      logMessage('Created point cloud material');\n\n      // Create point cloud\n      const pointCloud = new THREE.Points(geometry, material);\n      sceneRef.current.add(pointCloud);\n      pointCloudRef.current = pointCloud;\n      logMessage(`Added point cloud to scene. Scene children count: ${sceneRef.current.children.length}`);\n\n      // Preserve camera state\n      if (!hasInitializedCameraRef.current) {\n        // Initial setup\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage(`Initialized camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      } else {\n        // Preserve user's view\n        cameraRef.current.position.copy(currentCameraPosition);\n        controlsRef.current.target.copy(currentTarget);\n        logMessage(`Preserved camera at position: ${cameraRef.current.position.x}, ${cameraRef.current.position.y}, ${cameraRef.current.position.z}`);\n      }\n\n      setPointCloudStatus('Streaming');\n      logMessage(`Updated point cloud with ${vertices.length / 3} vertices`);\n\n    } catch (error) {\n      logMessage(`Error updating point cloud: ${error.message}`);\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const animate = (currentTime) => {\n    if (!isViewerRunningRef.current) return;\n\n    animationIdRef.current = requestAnimationFrame(animate);\n\n    // Calculate FPS\n    frameCountRef.current++;\n    if (currentTime - lastTimeRef.current >= 1000) {\n      setFps(frameCountRef.current);\n      frameCountRef.current = 0;\n      lastTimeRef.current = currentTime;\n    }\n\n    // Update controls\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Render\n    if (rendererRef.current && sceneRef.current && cameraRef.current) {\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n      // Debug: Log rendering info every 60 frames (about once per second)\n      if (frameCountRef.current % 60 === 0) {\n        logMessage(`Rendering frame. Scene children: ${sceneRef.current.children.length}, Point cloud: ${pointCloudRef.current ? 'Present' : 'Missing'}`);\n      }\n    }\n  };\n\n  const startPointCloudViewer = async () => {\n    if (!deviceId) {\n      alert('Please enter a device ID');\n      return;\n    }\n\n    try {\n      // Initialize Three.js if not already done\n      if (!sceneRef.current) {\n        initThreeJS();\n      }\n\n      // Clear existing point cloud\n      if (pointCloudRef.current) {\n        sceneRef.current.remove(pointCloudRef.current);\n        pointCloudRef.current.geometry.dispose();\n        pointCloudRef.current.material.dispose();\n        pointCloudRef.current = null;\n      }\n\n      setIsViewerRunning(true);\n      isViewerRunningRef.current = true;\n      setConnectionStatus('Connected');\n      setPointCloudStatus('Activating...');\n      logMessage('Starting 3D point cloud viewer...');\n\n      // Automatically activate point cloud processing\n      try {\n        logMessage('Activating point cloud processing...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`);\n        logMessage('Point cloud processing activated');\n\n        // Start a depth stream session to enable point cloud data\n        logMessage('Starting depth stream session...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/start`, {\n          configs: [{\n            sensor_id: `${deviceId}-sensor-0`,\n            stream_type: 'depth',\n            format: 'z16',\n            resolution: { width: 640, height: 480 },\n            framerate: 30\n          }]\n        });\n        logMessage('Depth stream session started');\n\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n\n      // Start animation loop\n      animate(0);\n\n      // Start point cloud updates\n      updateIntervalRef.current = setInterval(() => {\n        if (isViewerRunningRef.current) {\n          updatePointCloud();\n        } else {\n          clearInterval(updateIntervalRef.current);\n        }\n      }, 1000);\n\n      logMessage('3D point cloud viewer started successfully');\n\n    } catch (error) {\n      logMessage(`Failed to start 3D viewer: ${error.message}`);\n      setConnectionStatus('Error');\n      setPointCloudStatus('Error');\n    }\n  };\n\n  const resetDevice = async () => {\n    if (!deviceId) {\n      alert('Please enter a device ID');\n      return;\n    }\n\n    try {\n      logMessage('Resetting device...');\n      \n      // Stop any active streams\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n        logMessage('Stopped active streams');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n      \n      // Deactivate point cloud processing\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, { enabled: false });\n        logMessage('Deactivated point cloud processing');\n      } catch (error) {\n        logMessage(`Warning: ${error.message}`);\n      }\n      \n      // Wait for cleanup\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      logMessage('Device reset successfully - ready for WebRTC demo');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n    }\n  };\n\n  const stopPointCloudViewer = async () => {\n    setIsViewerRunning(false);\n    isViewerRunningRef.current = false;\n    setConnectionStatus('Disconnected');\n    setPointCloudStatus('Stopped');\n    setVertexCount(0);\n    setFps(0);\n\n    if (animationIdRef.current) {\n      cancelAnimationFrame(animationIdRef.current);\n      animationIdRef.current = null;\n    }\n\n    // Clear update interval\n    if (updateIntervalRef.current) {\n      clearInterval(updateIntervalRef.current);\n      updateIntervalRef.current = null;\n    }\n\n    // Clear existing point cloud\n    if (pointCloudRef.current) {\n      sceneRef.current.remove(pointCloudRef.current);\n      pointCloudRef.current.geometry.dispose();\n      pointCloudRef.current.material.dispose();\n      pointCloudRef.current = null;\n    }\n\n    // Reset camera initialization flag\n    hasInitializedCameraRef.current = false;\n\n    // Clean up depth session if it exists\n    if (deviceId) {\n      try {\n        logMessage('Cleaning up depth session...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n        logMessage('Depth session cleaned up');\n        \n        // Also deactivate point cloud processing\n        logMessage('Deactivating point cloud processing...');\n        await axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, { enabled: false });\n        logMessage('Point cloud processing deactivated');\n        \n        // Wait a moment for cleanup to complete\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n      } catch (error) {\n        logMessage(`Warning: Failed to clean up depth session: ${error.message}`);\n      }\n    }\n\n    logMessage('3D point cloud viewer stopped');\n  };\n\n  const discoverDevices = useCallback(async () => {\n    try {\n      logMessage('Discovering devices...');\n      logMessage(`Making request to: ${apiUrl}/devices/`);\n      \n      const response = await axios.get(`${apiUrl}/devices/`);\n      logMessage(`Response status: ${response.status}`);\n      logMessage(`Response data: ${JSON.stringify(response.data)}`);\n      \n      const devices = response.data;\n      \n      if (devices.length > 0) {\n        setDeviceId(devices[0].device_id);\n        logMessage(`Found ${devices.length} device(s): ${devices.map(d => d.device_id).join(', ')}`);\n      } else {\n        logMessage('No devices found');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover devices: ${error.message}`);\n      logMessage(`Error details: ${JSON.stringify(error.response?.data || error)}`);\n    }\n  }, [apiUrl, logMessage]);\n\n  const handleKeyPress = useCallback((event) => {\n    if (event.key === 'r' || event.key === 'R') {\n      // Reset camera\n      if (cameraRef.current && controlsRef.current) {\n        cameraRef.current.position.set(0, 0, 2);\n        controlsRef.current.target.set(0, 0, 0);\n        hasInitializedCameraRef.current = true;\n        logMessage('Camera reset to initial position');\n      }\n    }\n  }, [logMessage]);\n\n  useEffect(() => {\n    discoverDevices();\n    window.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.current);\n      }\n      \n      // Cleanup on unmount\n      if (deviceId) {\n        // Clean up any active streams\n        try {\n          axios.post(`${apiUrl}/devices/${deviceId}/stream/stop`);\n          axios.post(`${apiUrl}/devices/${deviceId}/point_cloud/activate`, { enabled: false });\n        } catch (error) {\n          // Ignore cleanup errors on unmount\n        }\n      }\n    };\n  }, [discoverDevices, handleKeyPress]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (canvasRef.current && cameraRef.current && rendererRef.current) {\n        const width = canvasRef.current.clientWidth;\n        const height = canvasRef.current.clientHeight;\n\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n        rendererRef.current.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🎯 RealSense 3D Point Cloud Viewer</h2>\n        <p>Interactive 3D visualization of RealSense depth data</p>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"apiUrl\">API URL:</label>\n          <input\n            type=\"text\"\n            id=\"apiUrl\"\n            value={apiUrl}\n            onChange={(e) => setApiUrl(e.target.value)}\n            placeholder=\"Enter API URL\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"deviceId\">Device ID:</label>\n          <input\n            type=\"text\"\n            id=\"deviceId\"\n            value={deviceId}\n            onChange={(e) => setDeviceId(e.target.value)}\n            placeholder=\"e.g., 844212070924\"\n          />\n        </div>\n        \n        <div>\n          <button onClick={discoverDevices} className=\"button\">\n            🔍 Discover Devices\n          </button>\n          <button \n            onClick={startPointCloudViewer} \n            className=\"button success\"\n            disabled={isViewerRunning}\n          >\n            ▶️ Start 3D Viewer\n          </button>\n          <button \n            onClick={stopPointCloudViewer} \n            className=\"button danger\"\n            disabled={!isViewerRunning}\n          >\n            ⏹️ Stop Viewer\n          </button>\n          <button \n            onClick={resetDevice} \n            className=\"button warning\"\n          >\n            🔄 Reset Device\n          </button>\n        </div>\n\n        <div className=\"status info\">\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span><strong>Connection:</strong> {connectionStatus}</span>\n            <span><strong>Point Cloud:</strong> {pointCloudStatus}</span>\n            <span><strong>Vertices:</strong> {vertexCount.toLocaleString()}</span>\n            <span><strong>FPS:</strong> {fps}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎮 3D Viewer Controls</h2>\n        <div className=\"sessions-panel\">\n          <h3>Mouse Controls:</h3>\n          <ul>\n            <li><strong>Left Click + Drag:</strong> Rotate camera around target</li>\n            <li><strong>Right Click + Drag:</strong> Pan camera</li>\n            <li><strong>Scroll Wheel:</strong> Zoom in/out</li>\n            <li><strong>R Key:</strong> Reset camera to initial position</li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 3D Point Cloud Viewer</h2>\n        <div style={{ \n          background: 'rgba(0, 0, 0, 0.8)', \n          borderRadius: '15px', \n          padding: '20px', \n          height: '600px', \n          position: 'relative', \n          overflow: 'hidden' \n        }}>\n          <canvas\n            ref={canvasRef}\n            style={{\n              width: '100%',\n              height: '100%',\n              borderRadius: '10px',\n              display: 'block'\n            }}\n          />\n          {!isViewerRunning && (\n            <div style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              fontSize: '18px',\n              color: '#ffd700'\n            }}>\n              Click \"Start 3D Viewer\" to begin\n            </div>\n          )}\n          {isViewerRunning && vertexCount > 0 && (\n            <div style={{\n              position: 'absolute',\n              top: '20px',\n              right: '20px',\n              background: 'rgba(0, 0, 0, 0.7)',\n              padding: '10px',\n              borderRadius: '8px',\n              fontSize: '14px',\n              color: 'white'\n            }}>\n              Points: {vertexCount.toLocaleString()}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointCloudDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}