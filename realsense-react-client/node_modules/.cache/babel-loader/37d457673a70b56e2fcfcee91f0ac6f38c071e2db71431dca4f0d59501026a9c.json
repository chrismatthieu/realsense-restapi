{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport cloudSignalingService from '../services/cloudSignalingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRTCDemo = () => {\n  _s();\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n  const connectionEstablishedRef = useRef(false);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot first', 'error');\n      return;\n    }\n    try {\n      logMessage('Refreshing robot connection...');\n      updateStatus('Refreshing robot...', 'info');\n\n      // Wait for robot to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Try to discover robots again\n      await discoverRobots();\n      updateStatus('Robot refresh completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to refresh robot: ${error.message}`);\n      updateStatus(`Failed to refresh robot: ${error.message}`, 'error');\n    }\n  };\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const {\n        sessionId,\n        offer\n      } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n\n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer === null || offer === void 0 ? void 0 : offer.type}`);\n      logMessage(`Offer sdp: ${offer !== null && offer !== void 0 && offer.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = event => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async event => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n  const refreshSessions = async () => {\n    try {\n      // In cloud architecture, sessions are managed by the cloud server\n      // We can get session info from the cloud signaling service\n      logMessage('Session management handled by cloud server');\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      // Close current session if active\n      if (sessionIdRef.current) {\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        sessionIdRef.current = null;\n      }\n      logMessage('All sessions closed');\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n  useEffect(() => {\n    let isConnecting = false;\n    let isConnected = false;\n\n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      if (isConnecting || isConnected) {\n        logMessage('Already connecting or connected, skipping...');\n        return;\n      }\n      isConnecting = true;\n      try {\n        logMessage('Attempting to connect to cloud server...');\n        await cloudSignalingService.connect();\n        isConnected = true;\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n\n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', robots => {\n          logMessage(`Received ${robots.length} available robots`);\n          setAvailableRobots(robots);\n          // Only set selected robot if none is currently selected\n          if (robots.length > 0) {\n            setSelectedRobot(prev => {\n              if (!prev) {\n                const firstRobot = robots[0];\n                setDeviceId(firstRobot.deviceInfo.deviceId);\n                logMessage(`Auto-selected robot: ${firstRobot.robotId}`);\n                return firstRobot;\n              }\n              return prev;\n            });\n          }\n        });\n        cloudSignalingService.addEventListener('robot-available', robot => {\n          logMessage(`Robot available: ${robot.robotId}`);\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        cloudSignalingService.addEventListener('robot-unavailable', robot => {\n          logMessage(`Robot unavailable: ${robot.robotId}`);\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          setSelectedRobot(prev => {\n            if (prev && prev.robotId === robot.robotId) {\n              return null;\n            }\n            return prev;\n          });\n        });\n        cloudSignalingService.addEventListener('disconnected', data => {\n          logMessage(`Disconnected from cloud server: ${data.reason}`);\n          setSignalingConnected(false);\n          isConnected = false;\n        });\n        cloudSignalingService.addEventListener('reconnected', data => {\n          logMessage(`Reconnected to cloud server (attempt ${data.attemptNumber})`);\n          setSignalingConnected(true);\n          isConnected = true;\n        });\n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n        isConnected = false;\n      } finally {\n        isConnecting = false;\n      }\n    };\n    connectToCloud();\n    return () => {\n      // Only disconnect if we're actually connected and this is a real cleanup\n      if (isConnected) {\n        logMessage('Cleaning up cloud connection...');\n        stopSessionRefresh();\n        cloudSignalingService.disconnect();\n      }\n    };\n  }, [logMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDD16 Robot WebRTC Multi-Client Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"robotSelect\",\n          children: \"Select Robot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"robotSelect\",\n          value: selectedRobot ? selectedRobot.robotId : '',\n          onChange: e => {\n            const robot = availableRobots.find(r => r.robotId === e.target.value);\n            setSelectedRobot(robot);\n            if (robot) {\n              setDeviceId(robot.deviceInfo.deviceId);\n            }\n          },\n          disabled: availableRobots.length === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"No robots available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), availableRobots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: robot.robotId,\n            children: [robot.deviceInfo.name, \" (Device: \", robot.deviceInfo.deviceId, \")\"]\n          }, robot.robotId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Available robots: \", availableRobots.length, \" | Selected device: \", deviceId || 'None']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"streamType\",\n          children: \"Stream Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"streamType\",\n          value: streamType,\n          onChange: e => setStreamType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"color\",\n            children: \"Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"depth\",\n            children: \"Depth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-1\",\n            children: \"Infrared 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-2\",\n            children: \"Infrared 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '10px 0',\n            padding: '10px',\n            backgroundColor: '#e7f3ff',\n            borderRadius: '4px',\n            borderLeft: '4px solid #007bff'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83C\\uDFAF 3D Point Cloud Viewer:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), \" For interactive 3D point cloud visualization,\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/pointcloud\",\n            style: {\n              color: '#007bff',\n              textDecoration: 'none',\n              fontWeight: 'bold',\n              marginLeft: '5px'\n            },\n            children: \"click here to open the 3D Point Cloud Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverRobots,\n          className: \"button\",\n          children: \"\\uD83D\\uDD0D Discover Robots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startStream,\n          className: \"button\",\n          disabled: isConnected,\n          children: \"\\u25B6\\uFE0F Start WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopStream,\n          className: \"button danger\",\n          disabled: !isConnected,\n          children: \"\\u23F9\\uFE0F Stop WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshSessions,\n          className: \"button\",\n          children: \"\\uD83D\\uDD04 Refresh Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeAllSessions,\n          className: \"button danger\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Close All Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          children: \"\\uD83D\\uDD04 Refresh Robot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            logMessage('Manual connection test...');\n            logMessage(`Cloud service connected: ${cloudSignalingService.getConnectionStatus().isConnected}`);\n            logMessage(`Available robots: ${cloudSignalingService.getAvailableRobots().length}`);\n          },\n          className: \"button info\",\n          children: \"\\uD83D\\uDD0D Test Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${statusType}`,\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${signalingConnected ? 'success' : 'error'}`,\n        children: [\"\\u2601\\uFE0F Cloud Server: \", signalingConnected ? 'Connected' : 'Disconnected', \" | Robots: \", availableRobots.length, \" | Service: \", cloudSignalingService.getConnectionStatus().isConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCCA Cloud Sessions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: sessionIdRef.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Active WebRTC Session\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Session ID: \", sessionIdRef.current]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Robot: \", (selectedRobot === null || selectedRobot === void 0 ? void 0 : selectedRobot.robotId) || 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Device: \", deviceId || 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Stream Type: \", streamType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No active sessions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start a stream to establish a WebRTC session with a robot.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDD17 Cloud Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: signalingConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cloud Server Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u2705 Connected to cloud signaling server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uD83E\\uDD16 Available robots: \", availableRobots.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCE1 WebRTC sessions managed by cloud server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cloud Server Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u274C Not connected to cloud server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Please check your connection to the cloud signaling server.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 Video Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `video-wrapper ${isConnected ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Current Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            style: {\n              width: '100%',\n              borderRadius: '8px',\n              background: '#000'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status ${isConnected ? 'success' : 'info'}`,\n            children: isConnected ? 'Streaming' : 'No video stream'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(WebRTCDemo, \"cCDsMvkZyiMQ0FdSWPAlouYVQtc=\");\n_c = WebRTCDemo;\nexport default WebRTCDemo;\nvar _c;\n$RefreshReg$(_c, \"WebRTCDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","cloudSignalingService","jsxDEV","_jsxDEV","WebRTCDemo","_s","deviceId","setDeviceId","streamType","setStreamType","status","setStatus","statusType","setStatusType","log","setLog","isConnected","setIsConnected","signalingConnected","setSignalingConnected","availableRobots","setAvailableRobots","selectedRobot","setSelectedRobot","videoRef","peerConnectionRef","sessionIdRef","sessionRefreshIntervalRef","connectionEstablishedRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","updateStatus","type","resetDevice","Promise","resolve","setTimeout","discoverRobots","error","robots","getAvailableRobots","length","deviceInfo","map","r","robotId","join","startStream","sessionData","createSession","sessionId","offer","current","JSON","stringify","sdp","pc","RTCPeerConnection","iceServers","urls","ontrack","event","srcObject","streams","onicecandidate","candidate","sendIceCandidate","Error","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendAnswer","startSessionRefresh","stopStream","closeSession","close","stopSessionRefresh","refreshSessions","closeAllSessions","setInterval","clearInterval","isConnecting","connectToCloud","connect","addEventListener","firstRobot","robot","filter","data","reason","attemptNumber","disconnect","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","find","target","disabled","name","style","margin","padding","backgroundColor","borderRadius","borderLeft","href","color","textDecoration","fontWeight","marginLeft","onClick","getConnectionStatus","ref","autoPlay","playsInline","muted","width","background","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport cloudSignalingService from '../services/cloudSignalingService';\n\nconst WebRTCDemo = () => {\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  \n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n  const connectionEstablishedRef = useRef(false);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n\n  const resetDevice = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot first', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Refreshing robot connection...');\n      updateStatus('Refreshing robot...', 'info');\n      \n      // Wait for robot to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Try to discover robots again\n      await discoverRobots();\n      \n      updateStatus('Robot refresh completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to refresh robot: ${error.message}`);\n      updateStatus(`Failed to refresh robot: ${error.message}`, 'error');\n    }\n  };\n\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      \n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      \n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      \n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const { sessionId, offer } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n      \n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer?.type}`);\n      logMessage(`Offer sdp: ${offer?.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = (event) => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async (event) => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      \n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n\n  const refreshSessions = async () => {\n    try {\n      // In cloud architecture, sessions are managed by the cloud server\n      // We can get session info from the cloud signaling service\n      logMessage('Session management handled by cloud server');\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      // Close current session if active\n      if (sessionIdRef.current) {\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        sessionIdRef.current = null;\n      }\n      logMessage('All sessions closed');\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    let isConnecting = false;\n    let isConnected = false;\n    \n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      if (isConnecting || isConnected) {\n        logMessage('Already connecting or connected, skipping...');\n        return;\n      }\n      \n      isConnecting = true;\n      try {\n        logMessage('Attempting to connect to cloud server...');\n        await cloudSignalingService.connect();\n        isConnected = true;\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n        \n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', (robots) => {\n          logMessage(`Received ${robots.length} available robots`);\n          setAvailableRobots(robots);\n          // Only set selected robot if none is currently selected\n          if (robots.length > 0) {\n            setSelectedRobot(prev => {\n              if (!prev) {\n                const firstRobot = robots[0];\n                setDeviceId(firstRobot.deviceInfo.deviceId);\n                logMessage(`Auto-selected robot: ${firstRobot.robotId}`);\n                return firstRobot;\n              }\n              return prev;\n            });\n          }\n        });\n        \n        cloudSignalingService.addEventListener('robot-available', (robot) => {\n          logMessage(`Robot available: ${robot.robotId}`);\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        \n        cloudSignalingService.addEventListener('robot-unavailable', (robot) => {\n          logMessage(`Robot unavailable: ${robot.robotId}`);\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          setSelectedRobot(prev => {\n            if (prev && prev.robotId === robot.robotId) {\n              return null;\n            }\n            return prev;\n          });\n        });\n        \n        cloudSignalingService.addEventListener('disconnected', (data) => {\n          logMessage(`Disconnected from cloud server: ${data.reason}`);\n          setSignalingConnected(false);\n          isConnected = false;\n        });\n        \n        cloudSignalingService.addEventListener('reconnected', (data) => {\n          logMessage(`Reconnected to cloud server (attempt ${data.attemptNumber})`);\n          setSignalingConnected(true);\n          isConnected = true;\n        });\n        \n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n        isConnected = false;\n      } finally {\n        isConnecting = false;\n      }\n    };\n\n    connectToCloud();\n    \n    return () => {\n      // Only disconnect if we're actually connected and this is a real cleanup\n      if (isConnected) {\n        logMessage('Cleaning up cloud connection...');\n        stopSessionRefresh();\n        cloudSignalingService.disconnect();\n      }\n    };\n  }, [logMessage]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🤖 Robot WebRTC Multi-Client Demo</h2>\n        <p>Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming</p>\n        \n\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"robotSelect\">Select Robot:</label>\n          <select\n            id=\"robotSelect\"\n            value={selectedRobot ? selectedRobot.robotId : ''}\n            onChange={(e) => {\n              const robot = availableRobots.find(r => r.robotId === e.target.value);\n              setSelectedRobot(robot);\n              if (robot) {\n                setDeviceId(robot.deviceInfo.deviceId);\n              }\n            }}\n            disabled={availableRobots.length === 0}\n          >\n            <option value=\"\">No robots available</option>\n            {availableRobots.map(robot => (\n              <option key={robot.robotId} value={robot.robotId}>\n                {robot.deviceInfo.name} (Device: {robot.deviceInfo.deviceId})\n              </option>\n            ))}\n          </select>\n          <small>Available robots: {availableRobots.length} | Selected device: {deviceId || 'None'}</small>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"streamType\">Stream Type:</label>\n          <select\n            id=\"streamType\"\n            value={streamType}\n            onChange={(e) => setStreamType(e.target.value)}\n          >\n            <option value=\"color\">Color</option>\n            <option value=\"depth\">Depth</option>\n            <option value=\"infrared-1\">Infrared 1</option>\n            <option value=\"infrared-2\">Infrared 2</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <p style={{ margin: '10px 0', padding: '10px', backgroundColor: '#e7f3ff', borderRadius: '4px', borderLeft: '4px solid #007bff' }}>\n            <strong>🎯 3D Point Cloud Viewer:</strong> For interactive 3D point cloud visualization, \n            <a href=\"/pointcloud\" style={{ color: '#007bff', textDecoration: 'none', fontWeight: 'bold', marginLeft: '5px' }}>\n              click here to open the 3D Point Cloud Demo\n            </a>\n          </p>\n        </div>\n        \n        <div>\n          <button onClick={discoverRobots} className=\"button\">\n            🔍 Discover Robots\n          </button>\n          <button \n            onClick={startStream} \n            className=\"button\"\n            disabled={isConnected}\n          >\n            ▶️ Start WebRTC Session\n          </button>\n          <button \n            onClick={stopStream} \n            className=\"button danger\"\n            disabled={!isConnected}\n          >\n            ⏹️ Stop WebRTC Session\n          </button>\n          <button onClick={refreshSessions} className=\"button\">\n            🔄 Refresh Sessions\n          </button>\n          <button onClick={closeAllSessions} className=\"button danger\">\n            🗑️ Close All Sessions\n          </button>\n          <button onClick={resetDevice} className=\"button warning\">\n            🔄 Refresh Robot\n          </button>\n          <button \n            onClick={() => {\n              logMessage('Manual connection test...');\n              logMessage(`Cloud service connected: ${cloudSignalingService.getConnectionStatus().isConnected}`);\n              logMessage(`Available robots: ${cloudSignalingService.getAvailableRobots().length}`);\n            }} \n            className=\"button info\"\n          >\n            🔍 Test Connection\n          </button>\n        </div>\n\n        <div className={`status ${statusType}`}>\n          {status}\n        </div>\n        <div className={`status ${signalingConnected ? 'success' : 'error'}`}>\n          ☁️ Cloud Server: {signalingConnected ? 'Connected' : 'Disconnected'} | Robots: {availableRobots.length} | Service: {cloudSignalingService.getConnectionStatus().isConnected ? 'Connected' : 'Disconnected'}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📊 Cloud Sessions</h2>\n        <div className=\"sessions-panel\">\n          {sessionIdRef.current ? (\n            <div>\n              <h3>Active WebRTC Session</h3>\n              <p>Session ID: {sessionIdRef.current}</p>\n              <p>Robot: {selectedRobot?.robotId || 'Unknown'}</p>\n              <p>Device: {deviceId || 'Unknown'}</p>\n              <p>Stream Type: {streamType}</p>\n            </div>\n          ) : (\n            <div>\n              <h3>No active sessions</h3>\n              <p>Start a stream to establish a WebRTC session with a robot.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🔗 Cloud Connection</h2>\n        <div className=\"sessions-panel\">\n          {signalingConnected ? (\n            <div>\n              <h3>Cloud Server Status</h3>\n              <p>✅ Connected to cloud signaling server</p>\n              <p>🤖 Available robots: {availableRobots.length}</p>\n              <p>📡 WebRTC sessions managed by cloud server</p>\n            </div>\n          ) : (\n            <div>\n              <h3>Cloud Server Status</h3>\n              <p>❌ Not connected to cloud server</p>\n              <p>Please check your connection to the cloud signaling server.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 Video Stream</h2>\n        <div className=\"video-container\">\n          <div className={`video-wrapper ${isConnected ? 'active' : ''}`}>\n            <h3>Current Stream</h3>\n            <video\n              ref={videoRef}\n              autoPlay\n              playsInline\n              muted\n              style={{ width: '100%', borderRadius: '8px', background: '#000' }}\n            />\n            <div className={`status ${isConnected ? 'success' : 'info'}`}>\n              {isConnected ? 'Streaming' : 'No video stream'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default WebRTCDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}