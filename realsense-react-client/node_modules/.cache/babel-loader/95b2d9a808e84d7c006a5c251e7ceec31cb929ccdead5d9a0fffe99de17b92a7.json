{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport cloudSignalingService from '../services/cloudSignalingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRTCDemo = () => {\n  _s();\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [sessions, setSessions] = useState([]);\n  const [streamRefs, setStreamRefs] = useState([]);\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n  const logMessage = useCallback(message => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n  const resetDevice = async () => {\n    if (!deviceId) {\n      updateStatus('Please enter a device ID', 'error');\n      return;\n    }\n    try {\n      logMessage('Performing hardware reset on device...');\n      updateStatus('Resetting device...', 'info');\n\n      // Try hardware reset first\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/hw_reset`);\n        logMessage('Hardware reset completed');\n      } catch (error) {\n        logMessage(`Hardware reset failed: ${error.message}`);\n      }\n\n      // Wait for device to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Try to discover robots again\n      await discoverRobots();\n      updateStatus('Device reset completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n      updateStatus(`Failed to reset device: ${error.message}`, 'error');\n    }\n  };\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const {\n        sessionId,\n        offer\n      } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n\n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer === null || offer === void 0 ? void 0 : offer.type}`);\n      logMessage(`Offer sdp: ${offer !== null && offer !== void 0 && offer.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{\n          urls: 'stun:stun.l.google.com:19302'\n        }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = event => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async event => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n  const refreshSessions = async () => {\n    try {\n      const [sessionsResponse, streamRefsResponse] = await Promise.all([axios.get(`${apiUrl}/webrtc/sessions`), axios.get(`${apiUrl}/webrtc/stream-references`)]);\n      setSessions(sessionsResponse.data);\n      setStreamRefs(streamRefsResponse.data);\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      await axios.delete(`${apiUrl}/webrtc/sessions`);\n      logMessage('All sessions closed');\n      setSessions([]);\n      setStreamRefs([]);\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n  useEffect(() => {\n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      try {\n        await cloudSignalingService.connect();\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n\n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', robots => {\n          setAvailableRobots(robots);\n          if (robots.length > 0 && !selectedRobot) {\n            setSelectedRobot(robots[0]);\n            setDeviceId(robots[0].deviceInfo.deviceId);\n          }\n        });\n        cloudSignalingService.addEventListener('robot-available', robot => {\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        cloudSignalingService.addEventListener('robot-unavailable', robot => {\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          if (selectedRobot && selectedRobot.robotId === robot.robotId) {\n            setSelectedRobot(null);\n          }\n        });\n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n      }\n    };\n    connectToCloud();\n    return () => {\n      stopSessionRefresh();\n      cloudSignalingService.disconnect();\n    };\n  }, [logMessage, selectedRobot]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDD16 Robot WebRTC Multi-Client Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"robotSelect\",\n          children: \"Select Robot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"robotSelect\",\n          value: selectedRobot ? selectedRobot.robotId : '',\n          onChange: e => {\n            const robot = availableRobots.find(r => r.robotId === e.target.value);\n            setSelectedRobot(robot);\n            if (robot) {\n              setDeviceId(robot.deviceInfo.deviceId);\n            }\n          },\n          disabled: availableRobots.length === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"No robots available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), availableRobots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: robot.robotId,\n            children: [robot.deviceInfo.name, \" (Device: \", robot.deviceInfo.deviceId, \")\"]\n          }, robot.robotId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Available robots: \", availableRobots.length, \" | Selected device: \", deviceId || 'None']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"streamType\",\n          children: \"Stream Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"streamType\",\n          value: streamType,\n          onChange: e => setStreamType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"color\",\n            children: \"Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"depth\",\n            children: \"Depth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-1\",\n            children: \"Infrared 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"infrared-2\",\n            children: \"Infrared 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '10px 0',\n            padding: '10px',\n            backgroundColor: '#e7f3ff',\n            borderRadius: '4px',\n            borderLeft: '4px solid #007bff'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\uD83C\\uDFAF 3D Point Cloud Viewer:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), \" For interactive 3D point cloud visualization,\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/pointcloud\",\n            style: {\n              color: '#007bff',\n              textDecoration: 'none',\n              fontWeight: 'bold',\n              marginLeft: '5px'\n            },\n            children: \"click here to open the 3D Point Cloud Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverRobots,\n          className: \"button\",\n          children: \"\\uD83D\\uDD0D Discover Robots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startStream,\n          className: \"button\",\n          disabled: isConnected,\n          children: \"\\u25B6\\uFE0F Start WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopStream,\n          className: \"button danger\",\n          disabled: !isConnected,\n          children: \"\\u23F9\\uFE0F Stop WebRTC Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshSessions,\n          className: \"button\",\n          children: \"\\uD83D\\uDD04 Refresh Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closeAllSessions,\n          className: \"button danger\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Close All Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetDevice,\n          className: \"button warning\",\n          children: \"\\uD83D\\uDD04 Reset Device\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${statusType}`,\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `status ${signalingConnected ? 'success' : 'error'}`,\n        children: [\"\\u2601\\uFE0F Cloud Server: \", signalingConnected ? 'Connected' : 'Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCCA Active Sessions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: sessions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Active WebRTC Sessions (\", sessions.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), sessions.map((session, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Session \", index + 1, \": \", session.session_id, \" - \", session.device_id, \" (\", session.stream_types.join(', '), \")\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No active sessions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start a stream to see active WebRTC sessions here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDD17 Stream References\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sessions-panel\",\n        children: streamRefs.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Active Stream References (\", streamRefs.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this), streamRefs.map((ref, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Device \", ref.device_id, \": \", ref.stream_type, \" (refs: \", ref.reference_count, \")\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No active stream references\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No device streams are currently active.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83C\\uDFA5 Video Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `video-wrapper ${isConnected ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Current Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            style: {\n              width: '100%',\n              borderRadius: '8px',\n              background: '#000'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status ${isConnected ? 'success' : 'info'}`,\n            children: isConnected ? 'Streaming' : 'No video stream'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83D\\uDCDD Connection Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: log\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n_s(WebRTCDemo, \"V4afNhBkEArPotwWxJEolY+08wQ=\");\n_c = WebRTCDemo;\nexport default WebRTCDemo;\nvar _c;\n$RefreshReg$(_c, \"WebRTCDemo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","cloudSignalingService","jsxDEV","_jsxDEV","WebRTCDemo","_s","deviceId","setDeviceId","streamType","setStreamType","status","setStatus","statusType","setStatusType","log","setLog","isConnected","setIsConnected","sessions","setSessions","streamRefs","setStreamRefs","signalingConnected","setSignalingConnected","availableRobots","setAvailableRobots","selectedRobot","setSelectedRobot","videoRef","peerConnectionRef","sessionIdRef","sessionRefreshIntervalRef","logMessage","message","timestamp","Date","toLocaleTimeString","prev","updateStatus","type","resetDevice","post","apiUrl","error","Promise","resolve","setTimeout","discoverRobots","robots","getAvailableRobots","length","deviceInfo","map","r","robotId","join","startStream","sessionData","createSession","sessionId","offer","current","JSON","stringify","sdp","pc","RTCPeerConnection","iceServers","urls","ontrack","event","srcObject","streams","onicecandidate","candidate","sendIceCandidate","Error","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendAnswer","startSessionRefresh","stopStream","closeSession","close","stopSessionRefresh","refreshSessions","sessionsResponse","streamRefsResponse","all","get","data","closeAllSessions","delete","setInterval","clearInterval","connectToCloud","connect","addEventListener","robot","filter","disconnect","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","find","target","disabled","name","style","margin","padding","backgroundColor","borderRadius","borderLeft","href","color","textDecoration","fontWeight","marginLeft","onClick","session","index","session_id","device_id","stream_types","ref","stream_type","reference_count","autoPlay","playsInline","muted","width","background","_c","$RefreshReg$"],"sources":["/home/ubuntu/Projects/realsense-restapi/realsense-react-client/src/pages/WebRTCDemo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport cloudSignalingService from '../services/cloudSignalingService';\n\nconst WebRTCDemo = () => {\n  const [deviceId, setDeviceId] = useState('');\n  const [streamType, setStreamType] = useState('color');\n  const [status, setStatus] = useState('Ready to connect');\n  const [statusType, setStatusType] = useState('info');\n  const [log, setLog] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [sessions, setSessions] = useState([]);\n  const [streamRefs, setStreamRefs] = useState([]);\n  const [signalingConnected, setSignalingConnected] = useState(false);\n  const [availableRobots, setAvailableRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  \n  const videoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const sessionIdRef = useRef(null);\n  const sessionRefreshIntervalRef = useRef(null);\n\n  const logMessage = useCallback((message) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prev => `[${timestamp}] ${message}\\n${prev}`);\n  }, []);\n\n  const updateStatus = useCallback((message, type = 'info') => {\n    setStatus(message);\n    setStatusType(type);\n  }, []);\n\n  const resetDevice = async () => {\n    if (!deviceId) {\n      updateStatus('Please enter a device ID', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Performing hardware reset on device...');\n      updateStatus('Resetting device...', 'info');\n      \n      // Try hardware reset first\n      try {\n        await axios.post(`${apiUrl}/devices/${deviceId}/hw_reset`);\n        logMessage('Hardware reset completed');\n      } catch (error) {\n        logMessage(`Hardware reset failed: ${error.message}`);\n      }\n      \n      // Wait for device to stabilize\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Try to discover robots again\n      await discoverRobots();\n      \n      updateStatus('Device reset completed', 'success');\n    } catch (error) {\n      logMessage(`Failed to reset device: ${error.message}`);\n      updateStatus(`Failed to reset device: ${error.message}`, 'error');\n    }\n  };\n\n  const discoverRobots = useCallback(async () => {\n    try {\n      logMessage('Discovering available robots...');\n      updateStatus('Discovering robots...', 'info');\n      \n      const robots = cloudSignalingService.getAvailableRobots();\n      setAvailableRobots(robots);\n      \n      if (robots.length > 0) {\n        setSelectedRobot(robots[0]);\n        setDeviceId(robots[0].deviceInfo.deviceId);\n        logMessage(`Found ${robots.length} robot(s): ${robots.map(r => r.robotId).join(', ')}`);\n        updateStatus(`Found ${robots.length} robot(s)`, 'success');\n      } else {\n        logMessage('No robots available');\n        updateStatus('No robots available', 'warning');\n      }\n    } catch (error) {\n      logMessage(`Failed to discover robots: ${error.message}`);\n      updateStatus(`Failed to discover robots: ${error.message}`, 'error');\n    }\n  }, [logMessage, updateStatus]);\n\n  const startStream = async () => {\n    if (!selectedRobot) {\n      updateStatus('Please select a robot', 'error');\n      return;\n    }\n\n    if (!signalingConnected) {\n      updateStatus('Not connected to cloud server', 'error');\n      return;\n    }\n\n    try {\n      logMessage('Starting WebRTC stream...');\n      updateStatus('Starting WebRTC stream...', 'info');\n      \n      logMessage(`Creating WebRTC session for robot: ${selectedRobot.robotId}, device: ${selectedRobot.deviceInfo.deviceId}, stream type: ${streamType}`);\n\n      // Create WebRTC session via cloud server\n      const sessionData = await cloudSignalingService.createSession(selectedRobot.robotId, selectedRobot.deviceInfo.deviceId, [streamType]);\n      const { sessionId, offer } = sessionData;\n      sessionIdRef.current = sessionId;\n      logMessage(`Session created: ${sessionId}`);\n      \n      // Debug the offer object\n      logMessage(`Offer object: ${JSON.stringify(offer)}`);\n      logMessage(`Offer type: ${offer?.type}`);\n      logMessage(`Offer sdp: ${offer?.sdp ? 'Present' : 'Missing'}`);\n\n      // Create RTCPeerConnection\n      const pc = new RTCPeerConnection({\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      });\n      peerConnectionRef.current = pc;\n\n      // Handle incoming tracks\n      pc.ontrack = (event) => {\n        logMessage('Received remote track');\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Handle ICE candidates\n      pc.onicecandidate = async (event) => {\n        if (event.candidate) {\n          try {\n            await cloudSignalingService.sendIceCandidate(sessionId, event.candidate);\n          } catch (error) {\n            logMessage(`Failed to send ICE candidate: ${error.message}`);\n          }\n        }\n      };\n\n      // Validate offer before setting remote description\n      if (!offer || !offer.type || !offer.sdp) {\n        throw new Error(`Invalid offer received: ${JSON.stringify(offer)}`);\n      }\n      \n      logMessage(`Setting remote description with type: ${offer.type}`);\n      // Set remote description\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer via cloud server\n      logMessage(`Sending answer for session: ${sessionId}`);\n      await cloudSignalingService.sendAnswer(sessionId, answer);\n\n      setIsConnected(true);\n      updateStatus('WebRTC stream connected', 'success');\n      logMessage('WebRTC stream connected successfully');\n\n      // Start session refresh\n      startSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to start stream: ${error.message}`);\n      updateStatus(`Failed to start stream: ${error.message}`, 'error');\n    }\n  };\n\n  const stopStream = async () => {\n    try {\n      if (sessionIdRef.current) {\n        logMessage('Stopping WebRTC stream...');\n        await cloudSignalingService.closeSession(sessionIdRef.current);\n        logMessage('WebRTC stream stopped');\n      }\n\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = null;\n      }\n\n      setIsConnected(false);\n      sessionIdRef.current = null;\n      updateStatus('WebRTC stream stopped', 'info');\n      stopSessionRefresh();\n\n    } catch (error) {\n      logMessage(`Failed to stop stream: ${error.message}`);\n    }\n  };\n\n  const refreshSessions = async () => {\n    try {\n      const [sessionsResponse, streamRefsResponse] = await Promise.all([\n        axios.get(`${apiUrl}/webrtc/sessions`),\n        axios.get(`${apiUrl}/webrtc/stream-references`)\n      ]);\n\n      setSessions(sessionsResponse.data);\n      setStreamRefs(streamRefsResponse.data);\n    } catch (error) {\n      logMessage(`Failed to refresh sessions: ${error.message}`);\n    }\n  };\n\n  const closeAllSessions = async () => {\n    try {\n      logMessage('Closing all sessions...');\n      await axios.delete(`${apiUrl}/webrtc/sessions`);\n      logMessage('All sessions closed');\n      setSessions([]);\n      setStreamRefs([]);\n    } catch (error) {\n      logMessage(`Failed to close all sessions: ${error.message}`);\n    }\n  };\n\n  const startSessionRefresh = () => {\n    sessionRefreshIntervalRef.current = setInterval(refreshSessions, 2000);\n  };\n\n  const stopSessionRefresh = () => {\n    if (sessionRefreshIntervalRef.current) {\n      clearInterval(sessionRefreshIntervalRef.current);\n      sessionRefreshIntervalRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    // Connect to cloud signaling server\n    const connectToCloud = async () => {\n      try {\n        await cloudSignalingService.connect();\n        setSignalingConnected(true);\n        logMessage('Connected to cloud server');\n        \n        // Set up event listeners\n        cloudSignalingService.addEventListener('available-robots', (robots) => {\n          setAvailableRobots(robots);\n          if (robots.length > 0 && !selectedRobot) {\n            setSelectedRobot(robots[0]);\n            setDeviceId(robots[0].deviceInfo.deviceId);\n          }\n        });\n        \n        cloudSignalingService.addEventListener('robot-available', (robot) => {\n          setAvailableRobots(prev => [...prev, robot]);\n        });\n        \n        cloudSignalingService.addEventListener('robot-unavailable', (robot) => {\n          setAvailableRobots(prev => prev.filter(r => r.robotId !== robot.robotId));\n          if (selectedRobot && selectedRobot.robotId === robot.robotId) {\n            setSelectedRobot(null);\n          }\n        });\n        \n      } catch (error) {\n        logMessage(`Failed to connect to cloud server: ${error.message}`);\n        setSignalingConnected(false);\n      }\n    };\n\n    connectToCloud();\n    \n    return () => {\n      stopSessionRefresh();\n      cloudSignalingService.disconnect();\n    };\n  }, [logMessage, selectedRobot]);\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h2>🤖 Robot WebRTC Multi-Client Demo</h2>\n        <p>Connect to robots with RealSense cameras via cloud WebRTC for real-time video streaming</p>\n        \n\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"robotSelect\">Select Robot:</label>\n          <select\n            id=\"robotSelect\"\n            value={selectedRobot ? selectedRobot.robotId : ''}\n            onChange={(e) => {\n              const robot = availableRobots.find(r => r.robotId === e.target.value);\n              setSelectedRobot(robot);\n              if (robot) {\n                setDeviceId(robot.deviceInfo.deviceId);\n              }\n            }}\n            disabled={availableRobots.length === 0}\n          >\n            <option value=\"\">No robots available</option>\n            {availableRobots.map(robot => (\n              <option key={robot.robotId} value={robot.robotId}>\n                {robot.deviceInfo.name} (Device: {robot.deviceInfo.deviceId})\n              </option>\n            ))}\n          </select>\n          <small>Available robots: {availableRobots.length} | Selected device: {deviceId || 'None'}</small>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"streamType\">Stream Type:</label>\n          <select\n            id=\"streamType\"\n            value={streamType}\n            onChange={(e) => setStreamType(e.target.value)}\n          >\n            <option value=\"color\">Color</option>\n            <option value=\"depth\">Depth</option>\n            <option value=\"infrared-1\">Infrared 1</option>\n            <option value=\"infrared-2\">Infrared 2</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <p style={{ margin: '10px 0', padding: '10px', backgroundColor: '#e7f3ff', borderRadius: '4px', borderLeft: '4px solid #007bff' }}>\n            <strong>🎯 3D Point Cloud Viewer:</strong> For interactive 3D point cloud visualization, \n            <a href=\"/pointcloud\" style={{ color: '#007bff', textDecoration: 'none', fontWeight: 'bold', marginLeft: '5px' }}>\n              click here to open the 3D Point Cloud Demo\n            </a>\n          </p>\n        </div>\n        \n        <div>\n          <button onClick={discoverRobots} className=\"button\">\n            🔍 Discover Robots\n          </button>\n          <button \n            onClick={startStream} \n            className=\"button\"\n            disabled={isConnected}\n          >\n            ▶️ Start WebRTC Session\n          </button>\n          <button \n            onClick={stopStream} \n            className=\"button danger\"\n            disabled={!isConnected}\n          >\n            ⏹️ Stop WebRTC Session\n          </button>\n          <button onClick={refreshSessions} className=\"button\">\n            🔄 Refresh Sessions\n          </button>\n          <button onClick={closeAllSessions} className=\"button danger\">\n            🗑️ Close All Sessions\n          </button>\n          <button onClick={resetDevice} className=\"button warning\">\n            🔄 Reset Device\n          </button>\n        </div>\n\n        <div className={`status ${statusType}`}>\n          {status}\n        </div>\n        <div className={`status ${signalingConnected ? 'success' : 'error'}`}>\n          ☁️ Cloud Server: {signalingConnected ? 'Connected' : 'Disconnected'}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📊 Active Sessions</h2>\n        <div className=\"sessions-panel\">\n          {sessions.length > 0 ? (\n            <div>\n              <h3>Active WebRTC Sessions ({sessions.length})</h3>\n              {sessions.map((session, index) => (\n                <p key={index}>\n                  Session {index + 1}: {session.session_id} - {session.device_id} ({session.stream_types.join(', ')})\n                </p>\n              ))}\n            </div>\n          ) : (\n            <div>\n              <h3>No active sessions</h3>\n              <p>Start a stream to see active WebRTC sessions here.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🔗 Stream References</h2>\n        <div className=\"sessions-panel\">\n          {streamRefs.length > 0 ? (\n            <div>\n              <h3>Active Stream References ({streamRefs.length})</h3>\n              {streamRefs.map((ref, index) => (\n                <p key={index}>\n                  Device {ref.device_id}: {ref.stream_type} (refs: {ref.reference_count})\n                </p>\n              ))}\n            </div>\n          ) : (\n            <div>\n              <h3>No active stream references</h3>\n              <p>No device streams are currently active.</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>🎥 Video Stream</h2>\n        <div className=\"video-container\">\n          <div className={`video-wrapper ${isConnected ? 'active' : ''}`}>\n            <h3>Current Stream</h3>\n            <video\n              ref={videoRef}\n              autoPlay\n              playsInline\n              muted\n              style={{ width: '100%', borderRadius: '8px', background: '#000' }}\n            />\n            <div className={`status ${isConnected ? 'success' : 'info'}`}>\n              {isConnected ? 'Streaming' : 'No video stream'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <h2>📝 Connection Log</h2>\n        <div className=\"log\">{log}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default WebRTCDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}